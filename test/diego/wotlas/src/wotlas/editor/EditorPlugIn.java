/* Light And Shadow. A Persistent Universe based on Robert Jordan's Wheel of Time Books.
 * Copyright (C) 2001-2002 WOTLAS Team
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package wotlas.editor;

import wotlas.client.screen.plugin.*;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;

import wotlas.utils.*;
import wotlas.libs.aswing.*;

import wotlas.libs.persistence.*;
import wotlas.libs.graphics2D.*;
import wotlas.common.*;

import wotlas.utils.Debug;

import wotlas.common.universe.*;

import wotlas.client.*;
import wotlas.client.screen.*;

import wotlas.libs.graphics2D.drawable.*;

import javax.swing.event.*;

/** Plug In to add editor tools
 *
 * @author Aldiss, Fred McMaster, Diego
 */

public class EditorPlugIn extends JPanelPlugIn {
 /*------------------------------------------------------------------------------------*/ 
    
    transient static public byte selectedIsFree = 0;
    transient static public int selectedGroup = 0;
    transient static public int selectedGroupImgNr = 0;
    transient static private GraphicsDirector gDirector;
    
  /** 'New' map button.
   */
    transient private AButton newMapButton;

  /** 'Save' map button.
   */
    transient private AButton saveMapButton;

  /** Center panel where the macros are set...
   */
    transient private JPanel centerPanel;
    
    
    /** Creates new form EditorPlugIn2 */
    public EditorPlugIn() {
        super();
        initComponents();
        init();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabel14 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        Preview = new javax.swing.JLabel();
        TileNotFree = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        mapData = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        DataID = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        DataFullName = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        DataShortName = new javax.swing.JTextField();
        jPanel15 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        DataInsertionPoint = new javax.swing.JTextField();
        jPanel21 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        DataSmallImage = new javax.swing.JTextField();
        jPanel18 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        DataMusicName = new javax.swing.JTextField();
        jPanel20 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        DataGroupOfGraphics = GetNewGOGList();
        jPanel19 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        DataLength = new javax.swing.JTextField();
        jPanel22 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        DataHeight = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        DataMapSize = new javax.swing.JList();
        jPanel17 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        DataBasicSetId = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        DataBasicSetIdNr = new javax.swing.JTextField();
        jPanel28 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList1 = GetNewGOGList();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane1.setDividerLocation(100);
        jScrollPane2 = new javax.swing.JScrollPane();
        OneGroupList = OneGroupList();
        jScrollPane3 = new javax.swing.JScrollPane();
        HisTileList = HisTileList();
        jPanel24 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jPanel26 = new javax.swing.JPanel();
        jPanel27 = new javax.swing.JPanel();

        jLabel14.setText("jLabel14");

        setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Selected :");
        jPanel1.add(jLabel15);

        Preview.setPreferredSize(new java.awt.Dimension(50, 50));
        jPanel1.add(Preview);

        TileNotFree.setBackground(new java.awt.Color(255, 255, 255));
        TileNotFree.setText("Not Free");
        TileNotFree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TileNotFreeActionPerformed(evt);
            }
        });

        jPanel1.add(TileNotFree);

        add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Editor Tools");
        jPanel2.add(jLabel1);

        add(jPanel2, java.awt.BorderLayout.NORTH);

        jTabbedPane1.setName("");
        jPanel3.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setViewportView(jTree1);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Map Tree", jPanel3);

        mapData.setLayout(new java.awt.BorderLayout());

        jLabel2.setText("Id");
        jPanel12.add(jLabel2);

        DataID.setText("jTextField1");
        jPanel12.add(DataID);

        jPanel4.add(jPanel12);

        jLabel3.setText("Full Name");
        jPanel13.add(jLabel3);

        DataFullName.setText("jTextField2");
        jPanel13.add(DataFullName);

        jPanel4.add(jPanel13);

        jLabel4.setText("Short Name");
        jPanel14.add(jLabel4);

        DataShortName.setText("jTextField3");
        jPanel14.add(DataShortName);

        jPanel4.add(jPanel14);

        jLabel5.setText("Insertion Point");
        jPanel15.add(jLabel5);

        DataInsertionPoint.setText("jTextField4");
        jPanel15.add(DataInsertionPoint);

        jPanel4.add(jPanel15);

        jLabel6.setText("Small Image");
        jPanel21.add(jLabel6);

        DataSmallImage.setText("jTextField5");
        DataSmallImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DataSmallImageActionPerformed(evt);
            }
        });

        jPanel21.add(DataSmallImage);

        jPanel4.add(jPanel21);

        jLabel7.setText("Music Name");
        jPanel18.add(jLabel7);

        DataMusicName.setText("jTextField6");
        jPanel18.add(DataMusicName);

        jPanel4.add(jPanel18);

        jPanel20.setLayout(new java.awt.GridLayout(1, 2));

        jLabel8.setText("Group Of Graphics");
        jPanel20.add(jLabel8);

        DataGroupOfGraphics.setPreferredSize(new java.awt.Dimension(100, 50));
        jPanel20.add(DataGroupOfGraphics);

        jPanel4.add(jPanel20);

        jLabel9.setText("Length");
        jPanel19.add(jLabel9);

        DataLength.setText("jTextField7");
        DataLength.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DataLengthActionPerformed(evt);
            }
        });

        jPanel19.add(DataLength);

        jPanel4.add(jPanel19);

        jLabel10.setText("Height");
        jPanel22.add(jLabel10);

        DataHeight.setText("jTextField8");
        DataHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DataHeightActionPerformed(evt);
            }
        });

        jPanel22.add(DataHeight);

        jPanel4.add(jPanel22);

        jPanel16.setLayout(new java.awt.BorderLayout());

        jLabel11.setText("Map Tile Size");
        jPanel16.add(jLabel11, java.awt.BorderLayout.WEST);

        DataMapSize.setMaximumSize(new java.awt.Dimension(30, 20));
        DataMapSize.setMinimumSize(new java.awt.Dimension(50, 20));
        DataMapSize.setPreferredSize(new java.awt.Dimension(100, 50));
        jPanel16.add(DataMapSize, java.awt.BorderLayout.EAST);

        jPanel4.add(jPanel16);

        jLabel12.setText("Basic Tile Set Id");
        jPanel17.add(jLabel12);

        DataBasicSetId.setText("jTextField9");
        jPanel17.add(DataBasicSetId);

        jPanel4.add(jPanel17);

        jLabel13.setText("Nr. basic image");
        jPanel11.add(jLabel13);

        DataBasicSetIdNr.setText("jTextField10");
        jPanel11.add(DataBasicSetIdNr);

        jPanel4.add(jPanel11);

        mapData.add(jPanel4, java.awt.BorderLayout.CENTER);

        jButton3.setText("New");
        jPanel28.add(jButton3);

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel28.add(jButton1);

        jButton2.setText("Load");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel28.add(jButton2);

        jButton4.setText("Refresh");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jPanel28.add(jButton4);

        mapData.add(jPanel28, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("TileMap", mapData);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel5.setEnabled(false);
        jPanel5.add(jPanel6, java.awt.BorderLayout.SOUTH);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel7.setEnabled(false);
        jList1.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(jList1);

        jPanel7.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel7, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Group of Graphics", jPanel5);

        jPanel8.setLayout(new java.awt.BorderLayout());

        jPanel9.add(jPanel23);

        jPanel8.add(jPanel9, java.awt.BorderLayout.SOUTH);

        jPanel10.setLayout(new java.awt.BorderLayout());

        OneGroupList.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        OneGroupList.setPreferredSize(new java.awt.Dimension(80, 100));
        OneGroupList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(OneGroupList);

        jSplitPane1.setLeftComponent(jScrollPane2);

        jScrollPane3.setPreferredSize(new java.awt.Dimension(80, 300));
        HisTileList.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        HisTileList.setPreferredSize(new java.awt.Dimension(80, 100));
        HisTileList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(HisTileList);

        jSplitPane1.setRightComponent(jScrollPane3);

        jPanel10.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jPanel8.add(jPanel10, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Paint", jPanel8);

        jTabbedPane1.addTab("Paint Item", jPanel24);

        jTabbedPane1.addTab("Make Item", jPanel25);

        jTabbedPane1.addTab("Paint Npc", jPanel26);

        jTabbedPane1.addTab("Make Npc", jPanel27);

        add(jTabbedPane1, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        gDirector.removeAllDrawables();
        EditTile.getDataManager().myMapData.initDisplayEditor( EditTile.getDataManager(), new WotlasLocation() );
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        gDirector.removeAllDrawables();
        EditTile.getDataManager().myMapData.initDisplayEditor( EditTile.getDataManager(), new WotlasLocation() );
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.out.println("time to save");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void TileNotFreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TileNotFreeActionPerformed
        if( !TileNotFree.isSelected() )
            setFreeTileOrNot( TileMap.TILE_FREE );
        else
            setFreeTileOrNot( TileMap.TILE_NOT_FREE );
    }//GEN-LAST:event_TileNotFreeActionPerformed

    private void DataHeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DataHeightActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_DataHeightActionPerformed

    private void DataSmallImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DataSmallImageActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_DataSmallImageActionPerformed

    private void DataLengthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DataLengthActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_DataLengthActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JList DataGroupOfGraphics;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JTextField DataHeight;
    private javax.swing.JTextField DataBasicSetIdNr;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JList DataMapSize;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JList OneGroupList;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField DataBasicSetId;
    private javax.swing.JPanel mapData;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JTextField DataMusicName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList HisTileList;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel Preview;
    private javax.swing.JTextField DataFullName;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton jButton1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField DataShortName;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField DataLength;
    private javax.swing.JTextField DataSmallImage;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JButton jButton4;
    private javax.swing.JTextField DataID;
    private javax.swing.JTextField DataInsertionPoint;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JCheckBox TileNotFree;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JTree jTree1;
    private javax.swing.JLabel jLabel10;
    // End of variables declaration//GEN-END:variables
    
 /*------------------------------------------------------------------------------------*/

  /** Called once to initialize the plug-in.
   *  @return if true we display the plug-in, return false if something fails during
   *          this init(), this way the plug-in won't be displayed.
   */
    public boolean init() {
        WotlasLocation location = new WotlasLocation();
        // TileMap tileMap = EditTile.getDataManager().getWorldManager().getTileMap( location );
        EditTile.workingOnThisTileMap = EditTile.getDataManager().getWorldManager().getTileMap( location );
        DataID.setText("xxx");
        DataFullName.setText(EditTile.workingOnThisTileMap.getFullName());
        DataShortName.setText(EditTile.workingOnThisTileMap.getShortName());
        DataInsertionPoint.setText("xxx");
        DataSmallImage.setText("xxx");
        DataMusicName.setText(EditTile.workingOnThisTileMap.getMusicName());
        //  doing this lose the right object
        // DataGroupOfGraphics = GetNewGOGList();
        DataLength.setText( "" + EditTile.workingOnThisTileMap.getMapSize().width );
        DataHeight.setText( "" + EditTile.workingOnThisTileMap.getMapSize().height );
        // DataMapTileSize.setText();
        DataBasicSetId.setText( "" + EditTile.workingOnThisTileMap.getManager().getBasicFloorId() );
        DataBasicSetIdNr.setText( "" + EditTile.workingOnThisTileMap.getManager().getBasicFloorNr() );
        return true; // this plug-in always works...
    }

 /*------------------------------------------------------------------------------------*/

    /** Called when we need to reset the content of this plug-in.
    */
    public void reset() {
        // We remove the previous content
    	init();
    }

   /** Returns the name of the plug-in that will be displayed in the JPlayerPanel.
    * @return a short name for the plug-in
    */
      public String getPlugInName() {
      	  return "Editor";
      }

 /*------------------------------------------------------------------------------------*/

   /** Returns the name of the plug-in's author.
    * @return author name.
    */
      public String getPlugInAuthor() {
          return "Wotlas Team (Aldiss & Fred & Diego)";
      }

 /*------------------------------------------------------------------------------------*/

   /** Returns the tool tip text that will be displayed in the JPlayerPanel.
    * @return a short tool tip text
    */
      public String getToolTipText() {
          return "To create/change TileMap";
      }

 /*------------------------------------------------------------------------------------*/

   /** Eventual index in the list of JPlayerPanels
    * @return -1 if the plug-in has to be added at the end of the plug-in list,
    *         otherwise a positive integer for a precise location.
    */
      public int getPlugInIndex() {
          return -1;
      }

 /*------------------------------------------------------------------------------------*/

   /** Tells if this plug-in is a system plug-in that represents some base
    *  wotlas feature.
    * @return true means system plug-in, false means user plug-in
    */
    public boolean isSystemPlugIn() {
        return false;
    }
      
    DefaultListModel listModel1,listModel2,listModel3;
    
    public JList GetNewGOGList() {
        ImageLibrary imageLib = EditTile.getDataManager().getImageLibrary();
        JLabel tmp;

        listModel1 = new DefaultListModel();
        tmp = new JLabel("Demo Set", GroupOfGraphics.DEMO_SET[0].getAsIcon(0, imageLib), JLabel.LEFT);
        listModel1.addElement( tmp );
        tmp = new JLabel("Rogue Like", GroupOfGraphics.ROGUE_SET[0].getAsIcon(0, imageLib), JLabel.LEFT );
        listModel1.addElement( tmp );

      	JList list = new JList();
        list = new JList(listModel1);
        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        list.setSelectedIndex(0);
        list.setCellRenderer(new RendIcon());
        list.setVisibleRowCount(5);
        list.getSelectionModel().addListSelectionListener( new ListSelectionListener() {
            public void valueChanged( ListSelectionEvent e ) {
                ListSelectionModel lsm = (ListSelectionModel)e.getSource();
                if( !lsm.getValueIsAdjusting() ) {
                    
                }
                // System.out.println( " diego: value: " + lsm.getLeadSelectionIndex() );
            }
        });
        return list;
    }

    class RendIcon extends JLabel implements ListCellRenderer {
        public Component getListCellRendererComponent(
        JList list,
        Object value,            // value to display
        int index,               // cell index
        boolean isSelected,      // is the cell selected
        boolean cellHasFocus)    // the list and the cell have the focus
        {
            JLabel tmp = (JLabel) value;
            setText( tmp.getText() );
            setIcon( tmp.getIcon() );
            setEnabled(list.isEnabled());
            setFont(list.getFont());
            setOpaque(true);
            setBackground(isSelected ? Color.cyan : Color.white);
            setForeground(isSelected ? Color.black : Color.black);
            return this;
        }
    }

    public void SetModel2(int index) {
        ImageLibrary imageLib = EditTile.getDataManager().getImageLibrary();
        JLabel tmp;
        listModel2.removeAllElements();
        for( int i=0; i < GroupOfGraphics.ROGUE_SET.length; i++) {
            tmp = new JLabel("Rogue", GroupOfGraphics.ROGUE_SET[i].getAsIcon(0, imageLib), JLabel.LEFT );
            listModel2.addElement( tmp );
        }
    }

    public JList OneGroupList() {
        listModel2 = new DefaultListModel();
        SetModel2(0);
                
      	JList list = new JList();
        list = new JList(listModel2);
        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        list.setSelectedIndex(0);
        list.setCellRenderer(new RendIcon());
        list.setVisibleRowCount(5);    
        list.getSelectionModel().addListSelectionListener( new ListSelectionListener() {
            public void valueChanged( ListSelectionEvent e ) {
                ListSelectionModel lsm = (ListSelectionModel)e.getSource();
                if( !lsm.getValueIsAdjusting() ) {
                    selectedGroup = lsm.getLeadSelectionIndex();
                    SetModel3( lsm.getLeadSelectionIndex() );
                }
            }
        });
        return list;
    }

    public void SetModel3(int index) {
        ImageLibrary imageLib = EditTile.getDataManager().getImageLibrary();
        JLabel tmp;
        listModel3.removeAllElements();
        for( int i=0; i < GroupOfGraphics.ROGUE_SET[index].totalImage(); i++) {
            tmp = new JLabel( GroupOfGraphics.ROGUE_SET[index].getAsIcon(i, imageLib), JLabel.LEFT );
            listModel3.addElement( tmp );
        }
    }

    public JList HisTileList() {
        listModel3 = new DefaultListModel();
        SetModel3(0);
        
      	JList list = new JList();
        list = new JList(listModel3);
        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        list.setSelectedIndex(0);
        list.setCellRenderer(new RendIcon());
        list.setVisibleRowCount(5);
        list.getSelectionModel().addListSelectionListener( new ListSelectionListener() {
            public void valueChanged( ListSelectionEvent e ) {
                ListSelectionModel lsm = (ListSelectionModel)e.getSource();
                if( !lsm.getValueIsAdjusting() ) {
                    ImageLibrary imageLib = EditTile.getDataManager().getImageLibrary();
                    selectedGroupImgNr = lsm.getLeadSelectionIndex();
                    Preview.setIcon( GroupOfGraphics.ROGUE_SET[selectedGroup].getAsIcon(selectedGroupImgNr, imageLib) );
                }
            }
        });
        return list;
    }

    
    static public void AddIt(int x, int y){
        TileMap tileMap = EditTile.workingOnThisTileMap;
        Drawable background = null;             // background image
        background = (Drawable) new MotionlessSprite( x*tileMap.getMapTileDim().width, // ground x=0
            y*tileMap.getMapTileDim().height,       // ground y=0
            tileMap.getGroupOfGraphics()[tileMap.getManager().getMapBackGroundData()[x][y][0]],  // GroupOfGraphics
            tileMap.getManager().getMapBackGroundData()[x][y][1],        // number of internal tile
            ImageLibRef.SECONDARY_MAP_PRIORITY      // priority
        );
        gDirector.addDrawable( background );
    }

    static public void rememberTheGDirector(GraphicsDirector value){
        gDirector = value;
    }

    static public void setFreeTileOrNot(byte value){
        selectedIsFree = value;
    }
}