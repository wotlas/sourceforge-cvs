/* Light And Shadow. A Persistent Universe based on Robert Jordan's Wheel of Time Books.
 * Copyright (C) 2001-2003 WOTLAS Team
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package wotlas.editor;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Point;
import java.io.File;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.ListCellRenderer;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeSelectionModel;
import wotlas.client.screen.JPanelPlugIn;
import wotlas.common.ImageLibRef;
import wotlas.common.environment.EnvironmentManager;
import wotlas.common.universe.MapExit;
import wotlas.common.universe.PreloaderEnabled;
import wotlas.common.universe.StoreTileMapBackground;
import wotlas.common.universe.TileManagerFlat;
import wotlas.common.universe.TileMap;
import wotlas.common.universe.TileMapManager;
import wotlas.common.universe.WotlasLocation;
import wotlas.libs.aswing.AButton;
import wotlas.libs.graphics2d.Drawable;
import wotlas.libs.graphics2d.GraphicsDirector;
import wotlas.libs.graphics2d.GroupOfGraphics;
import wotlas.libs.graphics2d.ImageIdentifier;
import wotlas.libs.graphics2d.ImageLibrary;
import wotlas.libs.graphics2d.drawable.MotionlessSprite;
import wotlas.utils.ScreenPoint;
import wotlas.utils.ScreenRectangle;

/** Plug In to add editor tools
 *
 * @author Aldiss, Fred McMaster, Diego
 */

public class EditorPlugIn extends JPanelPlugIn {

    /** extension to store files of editor
    */
    private static final long serialVersionUID = -3476939669879908936L;

    /**
     * extension to store files of editor
     */
    public static final String GRAPHIC_DATA_EXPORTED_EXT = ".background";

    /*------------------------------------------------------------------------------------*/
    transient static private String MAP_EXIT_START_MSG = "<html><b>Write a name in Name field then <p>" + "click the Add button to start adding a Map Exit.....</b></html>";

    transient static public boolean selectedIsFree = TileMap.TILE_NOT_FREE;
    transient static public int selectedGroup = 0;
    transient static public int selectedGroupImgNr = 0;
    transient static private GraphicsDirector gDirector;
    transient static public DefaultMutableTreeNode treeOfTileMapNode;

    transient static private int indexMapsExitsForExitPan = 0;
    transient static private int indexMapsForExitPan = 0;
    transient static private int ExitToLoad = 0;

    transient static public EditorPlugIn itSelf;
    //    transient static public DefaultMutableTreeNode area = null;

    /** 'New' map button.
     */
    transient private AButton newMapButton;

    /** 'Save' map button.
     */
    transient private AButton saveMapButton;

    /** Center panel where the macros are set...
     */
    transient private JPanel centerPanel;

    transient private DefaultListModel listModel1, listModel2, listModel3, listMapsForExitPan, listMapsExitsForExitPan, listExitMod;

    transient static int addExitStatus = 0;
    transient static private Point tmp1, tmp2;

    /** Creates new form EditorPlugIn2 */
    public EditorPlugIn() {
        super();
        EditorPlugIn.itSelf = this;
        // treeOfTileMapNode = new DefaultMutableTreeNode("World : Tile Maps");
        initComponents();
        LoadTree();
        init();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        this.jLabel14 = new javax.swing.JLabel();
        this.TitlePan = new javax.swing.JPanel();
        this.jLabel1 = new javax.swing.JLabel();
        this.MainTabb = new javax.swing.JTabbedPane();
        this.TileMapsPan = new javax.swing.JPanel();
        this.TileMapTabb = new javax.swing.JTabbedPane();
        this.LoadTileMap = new javax.swing.JPanel();
        this.jScrollPane1 = new javax.swing.JScrollPane();
        this.BigTree = new JTree(EditorPlugIn.treeOfTileMapNode);
        this.jPanel3 = new javax.swing.JPanel();
        this.buttonNew = new javax.swing.JButton();
        this.jLabel26 = new javax.swing.JLabel();
        this.SaveTileMap = new javax.swing.JPanel();
        this.jPanel28 = new javax.swing.JPanel();
        this.buttonSave = new javax.swing.JButton();
        this.buttonRefresh = new javax.swing.JButton();
        this.jPanel4 = new javax.swing.JPanel();
        this.jPanel30 = new javax.swing.JPanel();
        this.jLabel16 = new javax.swing.JLabel();
        this.DataAreaName = new javax.swing.JTextField();
        this.jPanel12 = new javax.swing.JPanel();
        this.jLabel2 = new javax.swing.JLabel();
        this.DataID = new javax.swing.JTextField();
        this.jPanel13 = new javax.swing.JPanel();
        this.jLabel3 = new javax.swing.JLabel();
        this.DataFullName = new javax.swing.JTextField();
        this.jPanel14 = new javax.swing.JPanel();
        this.jLabel4 = new javax.swing.JLabel();
        this.DataShortName = new javax.swing.JTextField();
        this.jPanel15 = new javax.swing.JPanel();
        this.jLabel5 = new javax.swing.JLabel();
        this.DataInsertionPoint = new javax.swing.JTextField();
        this.jPanel21 = new javax.swing.JPanel();
        this.jLabel6 = new javax.swing.JLabel();
        this.DataSmallImage = new javax.swing.JTextField();
        this.jPanel18 = new javax.swing.JPanel();
        this.jLabel7 = new javax.swing.JLabel();
        this.DataMusicName = new javax.swing.JTextField();
        this.jPanel20 = new javax.swing.JPanel();
        this.jLabel8 = new javax.swing.JLabel();
        this.DataGroupOfGraphics = GetNewGOGList();
        this.jPanel19 = new javax.swing.JPanel();
        this.jLabel9 = new javax.swing.JLabel();
        this.DataLength = new javax.swing.JTextField();
        this.jPanel22 = new javax.swing.JPanel();
        this.jLabel10 = new javax.swing.JLabel();
        this.DataHeight = new javax.swing.JTextField();
        this.jPanel16 = new javax.swing.JPanel();
        this.jLabel11 = new javax.swing.JLabel();
        this.DataMapSize = new javax.swing.JList();
        this.jPanel17 = new javax.swing.JPanel();
        this.jLabel12 = new javax.swing.JLabel();
        this.DataBasicSetId = new javax.swing.JTextField();
        this.jPanel11 = new javax.swing.JPanel();
        this.jLabel13 = new javax.swing.JLabel();
        this.DataBasicSetIdNr = new javax.swing.JTextField();
        this.jPanel2 = new javax.swing.JPanel();
        this.jLabel22 = new javax.swing.JLabel();
        this.GraphicsPan = new javax.swing.JPanel();
        this.jTabbedPane4 = new javax.swing.JTabbedPane();
        this.jPanel5 = new javax.swing.JPanel();
        this.jPanel7 = new javax.swing.JPanel();
        this.jScrollPane4 = new javax.swing.JScrollPane();
        this.jList1 = GetNewGOGList();
        this.jPanel8 = new javax.swing.JPanel();
        this.jPanel10 = new javax.swing.JPanel();
        this.jSplitPane1 = new javax.swing.JSplitPane();
        this.jSplitPane1.setDividerLocation(100);
        this.jScrollPane2 = new javax.swing.JScrollPane();
        this.OneGroupList = OneGroupList();
        this.jScrollPane3 = new javax.swing.JScrollPane();
        this.HisTileList = HisTileList();
        this.SelectedBrushPan = new javax.swing.JPanel();
        this.jLabel15 = new javax.swing.JLabel();
        this.Preview = new javax.swing.JLabel();
        this.TileNotFree = new javax.swing.JCheckBox();
        this.InfoOnBrushPan = new javax.swing.JPanel();
        this.jLabel20 = new javax.swing.JLabel();
        this.MapExitsPan = new javax.swing.JPanel();
        this.jPanel36 = new javax.swing.JPanel();
        this.jSplitPane2 = new javax.swing.JSplitPane();
        this.jListExits = GetExitList();
        this.jPanel6 = new javax.swing.JPanel();
        this.jLabel17 = new javax.swing.JLabel();
        this.StartPointText = new javax.swing.JTextField();
        this.jLabel18 = new javax.swing.JLabel();
        this.EndPointText = new javax.swing.JTextField();
        this.jLabel19 = new javax.swing.JLabel();
        this.DestinationText = new javax.swing.JTextField();
        this.jLabel23 = new javax.swing.JLabel();
        this.ExitName = new javax.swing.JTextField();
        this.jPanel34 = new javax.swing.JPanel();
        this.ListOfTileMapsForExit = initListMapsForExitPan();
        this.ListOfMapExitsForExit = initListMapsExitsForExitPan();
        this.jLabel24 = new javax.swing.JLabel();
        this.jLabel25 = new javax.swing.JLabel();
        this.AddExit = new javax.swing.JButton();
        this.SaveExit = new javax.swing.JButton();
        this.AbortExit = new javax.swing.JButton();
        this.DeleteExit = new javax.swing.JButton();
        this.SuspendExit = new javax.swing.JButton();
        this.CompleteExit = new javax.swing.JButton();
        this.ResumeExit = new javax.swing.JButton();
        this.jPanel1 = new javax.swing.JPanel();
        this.HelpOnMapExit = new javax.swing.JLabel();
        this.SchedulePan = new javax.swing.JPanel();
        this.jPanel38 = new javax.swing.JPanel();
        this.jButton3 = new javax.swing.JButton();
        this.jButton4 = new javax.swing.JButton();
        this.jPanel9 = new javax.swing.JPanel();
        this.jLabel21 = new javax.swing.JLabel();
        this.jPanel23 = new javax.swing.JPanel();
        this.jSplitPane3 = new javax.swing.JSplitPane();
        this.jPanel32 = new javax.swing.JPanel();
        this.jList2 = new javax.swing.JList();
        this.ImporExportPan = new javax.swing.JPanel();
        this.jPanel29 = new javax.swing.JPanel();
        this.jPanel24 = new javax.swing.JPanel();
        this.jLabel27 = new javax.swing.JLabel();
        this.jPanel25 = new javax.swing.JPanel();
        this.ExportBackground = new javax.swing.JButton();
        this.ImportBackground = new javax.swing.JButton();
        this.jPanel26 = new javax.swing.JPanel();
        this.jLabel28 = new javax.swing.JLabel();
        this.jPanel27 = new javax.swing.JPanel();
        this.ExportAll = new javax.swing.JButton();
        this.ImportAll = new javax.swing.JButton();

        this.jLabel14.setText("jLabel14");

        setLayout(new java.awt.BorderLayout());

        this.TitlePan.setBackground(new java.awt.Color(255, 255, 255));
        this.jLabel1.setText("Editor Tools");
        this.TitlePan.add(this.jLabel1);

        add(this.TitlePan, java.awt.BorderLayout.NORTH);

        this.MainTabb.setName("");
        this.TileMapsPan.setLayout(new java.awt.BorderLayout());

        this.TileMapTabb.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        this.TileMapTabb.setTabPlacement(SwingConstants.LEFT);
        this.LoadTileMap.setLayout(new java.awt.BorderLayout());

        this.jScrollPane1.setViewportView(this.BigTree);

        this.LoadTileMap.add(this.jScrollPane1, java.awt.BorderLayout.CENTER);

        this.buttonNew.setText("New");
        this.buttonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNewActionPerformed(evt);
            }
        });

        this.jPanel3.add(this.buttonNew);

        this.jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        this.jLabel26.setText("<html><b>To load Maps,  simply click on <p> the name of the one you want <p> to load</b></html>\"");
        this.jLabel26.setMaximumSize(new java.awt.Dimension(364, 50));
        this.jLabel26.setMinimumSize(new java.awt.Dimension(364, 50));
        this.jLabel26.setPreferredSize(new java.awt.Dimension(200, 50));
        this.jPanel3.add(this.jLabel26);

        this.LoadTileMap.add(this.jPanel3, java.awt.BorderLayout.SOUTH);

        this.TileMapTabb.addTab("Load/New", this.LoadTileMap);

        this.SaveTileMap.setLayout(new java.awt.BorderLayout());

        this.buttonSave.setText("Save");
        this.buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        this.jPanel28.add(this.buttonSave);

        this.buttonRefresh.setText("Refresh");
        this.buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });

        this.jPanel28.add(this.buttonRefresh);

        this.SaveTileMap.add(this.jPanel28, java.awt.BorderLayout.SOUTH);

        this.jLabel16.setText("Area Name");
        this.jPanel30.add(this.jLabel16);

        this.DataAreaName.setColumns(8);
        this.DataAreaName.setText("jTextField1");
        this.jPanel30.add(this.DataAreaName);

        this.jPanel4.add(this.jPanel30);

        this.jLabel2.setForeground(new java.awt.Color(0, 153, 51));
        this.jLabel2.setText("Id");
        this.jPanel12.add(this.jLabel2);

        this.DataID.setColumns(3);
        this.DataID.setEditable(false);
        this.DataID.setText("jTextField1");
        this.jPanel12.add(this.DataID);

        this.jPanel4.add(this.jPanel12);

        this.jLabel3.setText("Full Name");
        this.jPanel13.add(this.jLabel3);

        this.DataFullName.setColumns(8);
        this.DataFullName.setText("jTextField2");
        this.jPanel13.add(this.DataFullName);

        this.jPanel4.add(this.jPanel13);

        this.jLabel4.setText("Short Name");
        this.jPanel14.add(this.jLabel4);

        this.DataShortName.setColumns(5);
        this.DataShortName.setText("jTextField3");
        this.jPanel14.add(this.DataShortName);

        this.jPanel4.add(this.jPanel14);

        this.jLabel5.setForeground(new java.awt.Color(0, 153, 51));
        this.jLabel5.setText("Insertion Point");
        this.jPanel15.add(this.jLabel5);

        this.DataInsertionPoint.setColumns(3);
        this.DataInsertionPoint.setEditable(false);
        this.DataInsertionPoint.setText("jTextField4");
        this.jPanel15.add(this.DataInsertionPoint);

        this.jPanel4.add(this.jPanel15);

        this.jLabel6.setText("Small Image");
        this.jPanel21.add(this.jLabel6);

        this.DataSmallImage.setColumns(8);
        this.DataSmallImage.setText("jTextField5");
        this.DataSmallImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DataSmallImageActionPerformed(evt);
            }
        });

        this.jPanel21.add(this.DataSmallImage);

        this.jPanel4.add(this.jPanel21);

        this.jPanel18.setForeground(new java.awt.Color(0, 0, 0));
        this.jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        this.jLabel7.setText("Music Name");
        this.jPanel18.add(this.jLabel7);

        this.DataMusicName.setColumns(4);
        this.DataMusicName.setText("jTextField6");
        this.jPanel18.add(this.DataMusicName);

        this.jPanel4.add(this.jPanel18);

        this.jPanel20.setLayout(new java.awt.GridLayout(1, 2));

        this.jLabel8.setForeground(new java.awt.Color(0, 153, 51));
        this.jLabel8.setText("Group Of Graphics");
        this.jPanel20.add(this.jLabel8);

        this.DataGroupOfGraphics.setPreferredSize(new java.awt.Dimension(100, 50));
        this.jPanel20.add(this.DataGroupOfGraphics);

        this.jPanel4.add(this.jPanel20);

        this.jLabel9.setText("Length");
        this.jPanel19.add(this.jLabel9);

        this.DataLength.setColumns(8);
        this.DataLength.setText("jTextField7");
        this.DataLength.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DataLengthActionPerformed(evt);
            }
        });

        this.jPanel19.add(this.DataLength);

        this.jPanel4.add(this.jPanel19);

        this.jLabel10.setText("Height");
        this.jPanel22.add(this.jLabel10);

        this.DataHeight.setText("jTextField8");
        this.DataHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DataHeightActionPerformed(evt);
            }
        });

        this.jPanel22.add(this.DataHeight);

        this.jPanel4.add(this.jPanel22);

        this.jPanel16.setLayout(new java.awt.BorderLayout());

        this.jLabel11.setForeground(new java.awt.Color(0, 153, 51));
        this.jLabel11.setText("Map Tile Size");
        this.jPanel16.add(this.jLabel11, java.awt.BorderLayout.WEST);

        this.DataMapSize.setMaximumSize(new java.awt.Dimension(30, 20));
        this.DataMapSize.setMinimumSize(new java.awt.Dimension(50, 20));
        this.DataMapSize.setPreferredSize(new java.awt.Dimension(100, 50));
        this.jPanel16.add(this.DataMapSize, java.awt.BorderLayout.EAST);

        this.jPanel4.add(this.jPanel16);

        this.jLabel12.setForeground(new java.awt.Color(0, 153, 51));
        this.jLabel12.setText("Basic Tile Set Id");
        this.jPanel17.add(this.jLabel12);

        this.DataBasicSetId.setColumns(8);
        this.DataBasicSetId.setEditable(false);
        this.DataBasicSetId.setText("jTextField9");
        this.jPanel17.add(this.DataBasicSetId);

        this.jPanel4.add(this.jPanel17);

        this.jLabel13.setForeground(new java.awt.Color(0, 153, 51));
        this.jLabel13.setText("Nr. basic image");
        this.jPanel11.add(this.jLabel13);

        this.DataBasicSetIdNr.setColumns(8);
        this.DataBasicSetIdNr.setEditable(false);
        this.DataBasicSetIdNr.setText("jTextField10");
        this.jPanel11.add(this.DataBasicSetIdNr);

        this.jPanel4.add(this.jPanel11);

        this.SaveTileMap.add(this.jPanel4, java.awt.BorderLayout.CENTER);

        this.TileMapTabb.addTab("Save", this.SaveTileMap);

        this.TileMapsPan.add(this.TileMapTabb, java.awt.BorderLayout.CENTER);

        this.jLabel22.setForeground(new java.awt.Color(255, 51, 51));
        this.jLabel22.setText("Green labels, means data cant be changed.");
        this.jPanel2.add(this.jLabel22);

        this.TileMapsPan.add(this.jPanel2, java.awt.BorderLayout.NORTH);

        this.MainTabb.addTab("Load/Save", this.TileMapsPan);

        this.GraphicsPan.setLayout(new java.awt.BorderLayout());

        this.jPanel5.setLayout(new java.awt.BorderLayout());

        this.jPanel5.setEnabled(false);
        this.jPanel7.setLayout(new java.awt.BorderLayout());

        this.jPanel7.setEnabled(false);
        this.jList1.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        this.jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        this.jList1.setEnabled(false);
        this.jScrollPane4.setViewportView(this.jList1);

        this.jPanel7.add(this.jScrollPane4, java.awt.BorderLayout.CENTER);

        this.jPanel5.add(this.jPanel7, java.awt.BorderLayout.CENTER);

        this.jTabbedPane4.addTab("Select Types", this.jPanel5);

        this.jPanel8.setLayout(new java.awt.BorderLayout());

        this.jPanel10.setLayout(new java.awt.BorderLayout());

        this.jSplitPane1.setMaximumSize(new java.awt.Dimension(100, 300));
        this.jSplitPane1.setMinimumSize(new java.awt.Dimension(100, 300));
        this.jSplitPane1.setPreferredSize(new java.awt.Dimension(100, 300));
        this.OneGroupList.setMaximumSize(new java.awt.Dimension(300, 200));
        this.OneGroupList.setMinimumSize(new java.awt.Dimension(300, 200));
        this.OneGroupList.setPreferredSize(new java.awt.Dimension(100, 200));
        this.OneGroupList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        this.jScrollPane2.setViewportView(this.OneGroupList);

        this.jSplitPane1.setLeftComponent(this.jScrollPane2);

        this.HisTileList.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        this.HisTileList.setMaximumSize(new java.awt.Dimension(300, 200));
        this.HisTileList.setMinimumSize(new java.awt.Dimension(100, 200));
        this.HisTileList.setPreferredSize(new java.awt.Dimension(100, 200));
        this.HisTileList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        this.jScrollPane3.setViewportView(this.HisTileList);

        this.jSplitPane1.setRightComponent(this.jScrollPane3);

        this.jPanel10.add(this.jSplitPane1, java.awt.BorderLayout.CENTER);

        this.jPanel8.add(this.jPanel10, java.awt.BorderLayout.CENTER);

        this.jTabbedPane4.addTab("Select Picture", this.jPanel8);

        this.GraphicsPan.add(this.jTabbedPane4, java.awt.BorderLayout.CENTER);

        this.SelectedBrushPan.setBackground(new java.awt.Color(255, 255, 255));
        this.SelectedBrushPan.setMinimumSize(new java.awt.Dimension(100, 50));
        this.SelectedBrushPan.setPreferredSize(new java.awt.Dimension(100, 50));
        this.jLabel15.setText("Selected :");
        this.SelectedBrushPan.add(this.jLabel15);

        this.Preview.setPreferredSize(new java.awt.Dimension(50, 50));
        this.SelectedBrushPan.add(this.Preview);

        this.TileNotFree.setBackground(new java.awt.Color(255, 255, 255));
        this.TileNotFree.setSelected(true);
        this.TileNotFree.setText("Not Free");
        this.TileNotFree.setEnabled(false);
        this.TileNotFree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TileNotFreeActionPerformed(evt);
            }
        });

        this.SelectedBrushPan.add(this.TileNotFree);

        this.GraphicsPan.add(this.SelectedBrushPan, java.awt.BorderLayout.SOUTH);

        this.InfoOnBrushPan.setMaximumSize(new java.awt.Dimension(100, 20));
        this.InfoOnBrushPan.setMinimumSize(new java.awt.Dimension(100, 20));
        this.InfoOnBrushPan.setPreferredSize(new java.awt.Dimension(100, 20));
        this.jLabel20.setForeground(new java.awt.Color(255, 51, 51));
        this.jLabel20.setText("While this panel is selected you can paint selected tiles on map.");
        this.InfoOnBrushPan.add(this.jLabel20);

        this.GraphicsPan.add(this.InfoOnBrushPan, java.awt.BorderLayout.NORTH);

        this.MainTabb.addTab("Select Brush", null, this.GraphicsPan, "null");

        this.MapExitsPan.setLayout(new java.awt.BorderLayout());

        this.jPanel36.setLayout(new java.awt.BorderLayout());

        this.jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        this.jListExits.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        this.jListExits.setMinimumSize(new java.awt.Dimension(100, 100));
        this.jListExits.setPreferredSize(new java.awt.Dimension(100, 100));
        this.jListExits.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        this.jSplitPane2.setLeftComponent(this.jListExits);

        this.jPanel6.setLayout(null);

        this.jPanel6.setPreferredSize(new java.awt.Dimension(50, 50));
        this.jLabel17.setText("Start Point");
        this.jPanel6.add(this.jLabel17);
        this.jLabel17.setBounds(10, 10, 60, 16);

        this.StartPointText.setEditable(false);
        this.StartPointText.setText("jTextField1");
        this.jPanel6.add(this.StartPointText);
        this.StartPointText.setBounds(90, 10, 140, 20);

        this.jLabel18.setText("End Point");
        this.jPanel6.add(this.jLabel18);
        this.jLabel18.setBounds(10, 40, 53, 16);

        this.EndPointText.setEditable(false);
        this.EndPointText.setText("jTextField2");
        this.jPanel6.add(this.EndPointText);
        this.EndPointText.setBounds(90, 40, 140, 20);

        this.jLabel19.setText("Destination");
        this.jPanel6.add(this.jLabel19);
        this.jLabel19.setBounds(10, 100, 64, 16);

        this.DestinationText.setEditable(false);
        this.DestinationText.setText("jTextField3");
        this.jPanel6.add(this.DestinationText);
        this.DestinationText.setBounds(90, 100, 180, 20);

        this.jLabel23.setText("Name");
        this.jPanel6.add(this.jLabel23);
        this.jLabel23.setBounds(10, 70, 33, 16);

        this.jPanel6.add(this.ExitName);
        this.ExitName.setBounds(90, 70, 180, 20);

        this.jPanel34.setLayout(new java.awt.GridLayout(1, 2));

        this.jPanel34.add(this.ListOfTileMapsForExit);

        this.jPanel34.add(this.ListOfMapExitsForExit);

        this.jPanel6.add(this.jPanel34);
        this.jPanel34.setBounds(10, 150, 260, 90);

        this.jLabel24.setText("MapExits");
        this.jPanel6.add(this.jLabel24);
        this.jLabel24.setBounds(140, 130, 110, 16);

        this.jLabel25.setText("TileMaps");
        this.jPanel6.add(this.jLabel25);
        this.jLabel25.setBounds(10, 130, 100, 16);

        this.AddExit.setForeground(new java.awt.Color(153, 51, 255));
        this.AddExit.setText("Add");
        this.AddExit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        this.AddExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddExitActionPerformed(evt);
            }
        });

        this.jPanel6.add(this.AddExit);
        this.AddExit.setBounds(280, 10, 70, 20);

        this.SaveExit.setForeground(new java.awt.Color(153, 51, 255));
        this.SaveExit.setText("Save");
        this.SaveExit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        this.SaveExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveExitActionPerformed(evt);
            }
        });

        this.jPanel6.add(this.SaveExit);
        this.SaveExit.setBounds(280, 40, 70, 20);

        this.AbortExit.setForeground(new java.awt.Color(153, 51, 255));
        this.AbortExit.setText("Abort");
        this.AbortExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbortExitActionPerformed(evt);
            }
        });

        this.jPanel6.add(this.AbortExit);
        this.AbortExit.setBounds(280, 100, 70, 20);

        this.DeleteExit.setForeground(new java.awt.Color(153, 0, 51));
        this.DeleteExit.setText("Delete");
        this.DeleteExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteExitActionPerformed(evt);
            }
        });

        this.jPanel6.add(this.DeleteExit);
        this.DeleteExit.setBounds(280, 220, 80, 20);

        this.SuspendExit.setForeground(new java.awt.Color(153, 51, 255));
        this.SuspendExit.setText("Suspend");
        this.SuspendExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SuspendExitActionPerformed(evt);
            }
        });

        this.jPanel6.add(this.SuspendExit);
        this.SuspendExit.setBounds(280, 70, 84, 20);

        this.CompleteExit.setForeground(new java.awt.Color(102, 102, 255));
        this.CompleteExit.setText("Save");
        this.CompleteExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompleteExitActionPerformed(evt);
            }
        });

        this.jPanel6.add(this.CompleteExit);
        this.CompleteExit.setBounds(280, 180, 80, 20);

        this.ResumeExit.setForeground(new java.awt.Color(102, 102, 255));
        this.ResumeExit.setText("Resume");
        this.ResumeExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResumeExitActionPerformed(evt);
            }
        });

        this.jPanel6.add(this.ResumeExit);
        this.ResumeExit.setBounds(280, 150, 81, 20);

        this.jSplitPane2.setRightComponent(this.jPanel6);

        this.jPanel36.add(this.jSplitPane2, java.awt.BorderLayout.CENTER);

        this.jPanel1.setMinimumSize(new java.awt.Dimension(298, 50));
        this.jPanel1.setPreferredSize(new java.awt.Dimension(298, 50));
        this.HelpOnMapExit.setForeground(new java.awt.Color(255, 51, 51));
        this.HelpOnMapExit.setText("<html><b>Write a name in Name field then <p>click the Add button to start adding a Map Exit.....</b></html>");
        this.jPanel1.add(this.HelpOnMapExit);

        this.jPanel36.add(this.jPanel1, java.awt.BorderLayout.NORTH);

        this.MapExitsPan.add(this.jPanel36, java.awt.BorderLayout.CENTER);

        this.MainTabb.addTab("Map Exits", this.MapExitsPan);

        this.SchedulePan.setLayout(new java.awt.BorderLayout());

        this.jButton3.setText("Add");
        this.jPanel38.add(this.jButton3);

        this.jButton4.setText("Delete");
        this.jPanel38.add(this.jButton4);

        this.SchedulePan.add(this.jPanel38, java.awt.BorderLayout.SOUTH);

        this.jLabel21.setText(".............");
        this.jPanel9.add(this.jLabel21);

        this.SchedulePan.add(this.jPanel9, java.awt.BorderLayout.NORTH);

        this.jPanel23.setLayout(new java.awt.BorderLayout());

        this.jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        this.jPanel32.setMinimumSize(new java.awt.Dimension(100, 100));
        this.jPanel32.setPreferredSize(new java.awt.Dimension(100, 100));
        this.jSplitPane3.setBottomComponent(this.jPanel32);

        this.jList2.setMaximumSize(new java.awt.Dimension(32767, 32767));
        this.jList2.setMinimumSize(new java.awt.Dimension(100, 100));
        this.jList2.setPreferredSize(new java.awt.Dimension(100, 100));
        this.jSplitPane3.setTopComponent(this.jList2);

        this.jPanel23.add(this.jSplitPane3, java.awt.BorderLayout.CENTER);

        this.SchedulePan.add(this.jPanel23, java.awt.BorderLayout.CENTER);

        this.MainTabb.addTab("Schedule", this.SchedulePan);

        this.ImporExportPan.setFocusCycleRoot(true);
        this.jPanel29.setBorder(new javax.swing.border.TitledBorder("Background data"));
        this.jPanel24.setLayout(new java.awt.BorderLayout());

        this.jPanel24.setBorder(new javax.swing.border.EtchedBorder());
        this.jLabel27.setForeground(new java.awt.Color(255, 0, 255));
        this.jLabel27.setText("<html>\n<body>\n<p>\n<p>         Export/Import ONLY data\n<p>\n<p>               of this map<p>\n<p>\n<p>\n</body>\n</html>");
        this.jPanel24.add(this.jLabel27, java.awt.BorderLayout.CENTER);

        this.ExportBackground.setText("Export");
        this.ExportBackground.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportBackgroundActionPerformed(evt);
            }
        });

        this.jPanel25.add(this.ExportBackground);

        this.ImportBackground.setText("Import");
        this.ImportBackground.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportBackgroundActionPerformed(evt);
            }
        });

        this.jPanel25.add(this.ImportBackground);

        this.jPanel24.add(this.jPanel25, java.awt.BorderLayout.SOUTH);

        this.jPanel29.add(this.jPanel24);

        this.jPanel26.setLayout(new java.awt.BorderLayout());

        this.jPanel26.setBorder(new javax.swing.border.EtchedBorder());
        this.jLabel28.setForeground(new java.awt.Color(255, 0, 0));
        this.jLabel28.setText("<html>\n<body>\n<p>\n<p>         Export ALL the MAPS \n<p>\n<p>               to backup directory <p>\n<p>\n<p>\n</body>\n</html>");
        this.jPanel26.add(this.jLabel28, java.awt.BorderLayout.CENTER);

        this.ExportAll.setText("Export All");
        this.ExportAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportAllActionPerformed(evt);
            }
        });

        this.jPanel27.add(this.ExportAll);

        this.ImportAll.setText("Import All");
        this.ImportAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportAllActionPerformed(evt);
            }
        });

        this.jPanel27.add(this.ImportAll);

        this.jPanel26.add(this.jPanel27, java.awt.BorderLayout.SOUTH);

        this.jPanel29.add(this.jPanel26);

        this.ImporExportPan.add(this.jPanel29);

        this.MainTabb.addTab("Import/Export", this.ImporExportPan);

        add(this.MainTabb, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

    private void ImportAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportAllActionPerformed
        // Add your handling code here:
        EditorPlugIn.gDirector.removeAllDrawables();
        EditTile.getDataManager().myMapData.initDisplayEditor(EditTile.getDataManager(), EditTile.workingOnThisTileMap.getLocation());
        RefreshData();
    }//GEN-LAST:event_ImportAllActionPerformed

    private void ExportAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportAllActionPerformed
        new File(EditTile.getResourceManager().getEditorBackupDataDir()).mkdirs();
        StoreTileMapBackground onlyBackground;
        TileMap[] mapTiles;
        mapTiles = EditTile.getDataManager().getWorldManager().getWorldMapFromID(0).getTileMaps();
        for (int i = 0; i < mapTiles.length; i++) {
            onlyBackground = mapTiles[i].getStoreBackground();
            EditTile.getResourceManager().BackupObject(onlyBackground, EditTile.getResourceManager().getEditorBackupDataDir() + File.separator + mapTiles[i].getShortName() + EditorPlugIn.GRAPHIC_DATA_EXPORTED_EXT);
        }
    }//GEN-LAST:event_ExportAllActionPerformed

    private void ImportBackgroundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportBackgroundActionPerformed
        try {
            StoreTileMapBackground onlyBackground;
            onlyBackground = (StoreTileMapBackground) EditTile.getResourceManager().RestoreObject(EditTile.workingOnThisTileMap.getFileName() + EditorPlugIn.GRAPHIC_DATA_EXPORTED_EXT);
            EditTile.workingOnThisTileMap.setStoreBackground(onlyBackground);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(EditTile.getDataManager().getScreen(), "Missing import file!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        EditorPlugIn.gDirector.removeAllDrawables();
        EditTile.getDataManager().myMapData.initDisplayEditor(EditTile.getDataManager(), EditTile.workingOnThisTileMap.getLocation());
        RefreshData();
    }//GEN-LAST:event_ImportBackgroundActionPerformed

    private void ExportBackgroundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportBackgroundActionPerformed
        StoreTileMapBackground onlyBackground;
        onlyBackground = EditTile.workingOnThisTileMap.getStoreBackground();
        EditTile.getResourceManager().BackupObject(onlyBackground, EditTile.workingOnThisTileMap.getFileName() + EditorPlugIn.GRAPHIC_DATA_EXPORTED_EXT);
    }//GEN-LAST:event_ExportBackgroundActionPerformed

    private void ResumeExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResumeExitActionPerformed
        EditorPlugIn.itSelf.HelpOnMapExit.setText("<html><b>Resume load selected exit in memory to choose<p>" + "a new destination for it. Click Save to finish.</b></html>");
        EditorPlugIn.addExitStatus = 10;
    }//GEN-LAST:event_ResumeExitActionPerformed

    private void CompleteExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompleteExitActionPerformed
        if (EditorPlugIn.addExitStatus != 10)
            return;
        MapExit mapExit1 = EditTile.workingOnThisTileMap.getManager().getMapExits()[EditorPlugIn.ExitToLoad];
        mapExit1.setTargetWotlasLocation(EditTile.getDataManager().getWorldManager().getWorldMapFromID(0).getTileMapFromID(EditorPlugIn.indexMapsForExitPan).getLocation());
        mapExit1.setTargetPosition(EditTile.getDataManager().getWorldManager().getWorldMapFromID(0).getTileMapFromID(EditorPlugIn.indexMapsForExitPan).getMapExits()[EditorPlugIn.indexMapsExitsForExitPan].getScreenPointFromExitLocation());
        mapExit1.setName(this.ExitName.getText());
        EditorPlugIn.addExitStatus = 0;
        this.ExitName.setText("");
        SetListExitMod();
        addListMapsForExitPan();
        EditorPlugIn.itSelf.HelpOnMapExit.setText(EditorPlugIn.MAP_EXIT_START_MSG);
        EditorPlugIn.gDirector.removeAllDrawables();
        EditTile.getDataManager().myMapData.initDisplayEditor(EditTile.getDataManager(), EditTile.workingOnThisTileMap.getLocation());
    }//GEN-LAST:event_CompleteExitActionPerformed

    private void SuspendExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SuspendExitActionPerformed
        if (EditorPlugIn.addExitStatus != 4)
            return;
        if (this.ExitName.getText().length() == 0) {
            JOptionPane.showMessageDialog(EditTile.getDataManager().getScreen(), "You miss to write a name for this exit!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int x = 0, y = 0, xx = 0, yy = 0;
        x = EditorPlugIn.tmp1.x;
        y = EditorPlugIn.tmp1.y;
        if (x > EditorPlugIn.tmp2.x) {
            x = EditorPlugIn.tmp2.x;
            xx = EditorPlugIn.tmp1.x + 1;
        } else
            yy = EditorPlugIn.tmp2.y + 1;
        if (y > EditorPlugIn.tmp2.y) {
            y = EditorPlugIn.tmp2.y;
            yy = EditorPlugIn.tmp1.y + 1;
        } else
            yy = EditorPlugIn.tmp2.y + 1;
        MapExit mapExit1 = null;
        mapExit1 = EditTile.workingOnThisTileMap.getManager().addMapExit(new ScreenRectangle(x * 32, y * 32, xx * 32, yy * 32), this.ExitName.getText());
        mapExit1.setType(MapExit.TILEMAP_EXIT);
        mapExit1.setMapExitSide(MapExit.NONE);
        EditorPlugIn.addExitStatus = 0;
        this.ExitName.setText("");
        SetListExitMod();
        addListMapsForExitPan();
        EditorPlugIn.itSelf.HelpOnMapExit.setText(EditorPlugIn.MAP_EXIT_START_MSG);
        EditorPlugIn.gDirector.removeAllDrawables();
        EditTile.getDataManager().myMapData.initDisplayEditor(EditTile.getDataManager(), EditTile.workingOnThisTileMap.getLocation());
    }//GEN-LAST:event_SuspendExitActionPerformed

    private void DeleteExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteExitActionPerformed
        // EditTile.workingOnThisTileMap.get ?? remove it from the array and remake the array 
        // to fill the hole.
        SetListExitMod();
        addListMapsForExitPan();
        EditorPlugIn.gDirector.removeAllDrawables();
        EditTile.getDataManager().myMapData.initDisplayEditor(EditTile.getDataManager(), EditTile.workingOnThisTileMap.getLocation());
        RefreshData();
    }//GEN-LAST:event_DeleteExitActionPerformed

    private void AbortExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbortExitActionPerformed
        this.ExitName.setText("");
        EditorPlugIn.itSelf.HelpOnMapExit.setText(EditorPlugIn.MAP_EXIT_START_MSG);
        EditorPlugIn.addExitStatus = 0;
    }//GEN-LAST:event_AbortExitActionPerformed

    private void SaveExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveExitActionPerformed
        if (EditorPlugIn.addExitStatus != 4)
            return;
        if (this.ExitName.getText().length() == 0)
            JOptionPane.showMessageDialog(EditTile.getDataManager().getScreen(), "You miss to write a name for this exit!", "Warning", JOptionPane.WARNING_MESSAGE);
        int x = 0, y = 0, xx = 0, yy = 0;
        x = EditorPlugIn.tmp1.x;
        y = EditorPlugIn.tmp1.y;
        if (x > EditorPlugIn.tmp2.x) {
            x = EditorPlugIn.tmp2.x;
            xx = EditorPlugIn.tmp1.x - EditorPlugIn.tmp2.x;
        } else
            xx = EditorPlugIn.tmp2.x - EditorPlugIn.tmp1.x;
        if (y > EditorPlugIn.tmp2.y) {
            y = EditorPlugIn.tmp2.y;
            yy = EditorPlugIn.tmp1.y - EditorPlugIn.tmp2.y;
        } else
            yy = EditorPlugIn.tmp2.y - EditorPlugIn.tmp1.y;
        MapExit mapExit1 = null;
        //        System.out.println( (x*32)+","+(y*32)+","+(xx*32)+","+(yy*32) );
        mapExit1 = EditTile.workingOnThisTileMap.getManager().addMapExit(new ScreenRectangle(x * 32, y * 32, (xx + 1) * 32, (yy + 1) * 32), this.ExitName.getText());
        mapExit1.setType(MapExit.TILEMAP_EXIT);
        mapExit1.setMapExitSide(MapExit.NONE);
        mapExit1.setTargetWotlasLocation(EditTile.getDataManager().getWorldManager().getWorldMapFromID(0).getTileMapFromID(EditorPlugIn.indexMapsForExitPan).getLocation());
        mapExit1.setTargetPosition(EditTile.getDataManager().getWorldManager().getWorldMapFromID(0).getTileMapFromID(EditorPlugIn.indexMapsForExitPan).getMapExits()[EditorPlugIn.indexMapsExitsForExitPan].getScreenPointFromExitLocation());
        EditorPlugIn.addExitStatus = 0;
        this.ExitName.setText("");
        SetListExitMod();
        addListMapsForExitPan();
        EditorPlugIn.itSelf.HelpOnMapExit.setText(EditorPlugIn.MAP_EXIT_START_MSG);
        EditorPlugIn.gDirector.removeAllDrawables();
        EditTile.getDataManager().myMapData.initDisplayEditor(EditTile.getDataManager(), EditTile.workingOnThisTileMap.getLocation());
    }//GEN-LAST:event_SaveExitActionPerformed

    private void AddExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddExitActionPerformed
        EditorPlugIn.addExitStatus = 1;
        EditorPlugIn.manageAddExit(0, 0);
    }//GEN-LAST:event_AddExitActionPerformed

    private void buttonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNewActionPerformed
        // In a ComponentDialog, you can show as many message components and 
        // as many options as you want: 

        JTextField dimX, dimY;

        // Messages 
        Object[] message = new Object[6];
        message[0] = "Insert witdh";
        message[1] = dimX = new JTextField("" + 60);
        message[2] = "Insert height";
        message[3] = dimY = new JTextField("" + 60);

        JComboBox basicTileSelect = new JComboBox();
        ImageLibrary imageLib = EditTile.getDataManager().getImageLibrary();
        //        JLabel tmp;
        for (int i = 0; i < GroupOfGraphics.ROGUE_SET[0].totalImage(); i++) {
            //            tmp = new JLabel( GroupOfGraphics.ROGUE_SET[6].getAsIcon(i, imageLib), JLabel.LEFT );
            basicTileSelect.addItem(GroupOfGraphics.ROGUE_SET[0].getAsIcon(i, imageLib));
        }
        message[4] = basicTileSelect;
        message[5] = "Select the basic tile to use";

        // Options 
        String[] options = { "Create", "Cancel" };
        int result = JOptionPane.showOptionDialog(this, // the parent that the dialog blocks 
        message, // the dialog message array 
        "New map", // the title of the dialog window 
        JOptionPane.DEFAULT_OPTION, // option type
        JOptionPane.INFORMATION_MESSAGE, // message type
        null, // optional icon, use null to use the default icon 
        options, // options string array, will be made into buttons 
        options[0] // option that should be made into a default button 
        );
        switch (result) {
            case 0: // yes 
                break;
            case 1: // no 
                return;
            default:
                break;
        }

        int gotDimX, gotDimY;
        try {
            gotDimX = new Integer(dimX.getText()).intValue();
            gotDimY = new Integer(dimX.getText()).intValue();
        } catch (Exception e) {
            return;
        }

        EditorPlugIn.gDirector.removeAllDrawables();
        TileMap destination = EditTile.getDataManager().getWorldManager().getWorldMapFromID(0).addNewTileMap();
        destination.initNewTileMap(EditTile.getDataManager().getWorldManager().getWorldMapFromID(0));
        destination.setAreaName("");
        destination.setFullName("New Map");
        destination.setShortName("");
        destination.setInsertionPoint(new ScreenPoint(10, 10));
        destination.setSmallTileMapImage(new ImageIdentifier("maps-1/town-small-1/shayol-ghul-2"));
        destination.setMusicName("tar-valon.mid");
        destination.selectGraphicSet(EnvironmentManager.GRAPHICS_SET_ROGUE);
        TileManagerFlat manager = new TileManagerFlat(destination);
        manager.setMap(gotDimX, gotDimY, TileMap.PIXEL_32, (byte) 0, (byte) basicTileSelect.getSelectedIndex());
        destination.setManager(manager);
        EditTile.workingOnThisTileMap = destination;
        EditTile.getDataManager().myMapData.initDisplayEditor(EditTile.getDataManager(), EditTile.workingOnThisTileMap.getLocation());
        RefreshData();
    }//GEN-LAST:event_buttonNewActionPerformed

    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed
        EditorPlugIn.gDirector.removeAllDrawables();
        EditTile.getDataManager().myMapData.initDisplayEditor(EditTile.getDataManager(), EditTile.workingOnThisTileMap.getLocation());
    }//GEN-LAST:event_buttonRefreshActionPerformed

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        try {
            TileMap tileMap = EditTile.getDataManager().getWorldManager().getTileMap(EditTile.workingOnThisTileMap.getLocation());
            EditTile.workingOnThisTileMap.setAreaName(this.DataAreaName.getText());
            EditTile.workingOnThisTileMap.setFullName(this.DataFullName.getText());
            EditTile.workingOnThisTileMap.setShortName(this.DataShortName.getText());
            EditTile.workingOnThisTileMap.setMusicName(this.DataMusicName.getText());
            // DataInsertionPoint.setText("xxx");
            // DataSmallImage.setText("xxx");
            // DataBasicSetId.setText( "" + EditTile.workingOnThisTileMap.getManager().getBasicFloorId() );
            // DataBasicSetIdNr.setText( "" + EditTile.workingOnThisTileMap.getManager().getBasicFloorNr() );
        } catch (Exception e) {
            System.out.println("not saved as");
            return;
        }
        EditTile.letsTryToSave(EditTile.workingOnThisTileMap.tileMapID);
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void TileNotFreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TileNotFreeActionPerformed
        if (!this.TileNotFree.isSelected())
            EditorPlugIn.selectedIsFree = TileMap.TILE_FREE;
        else
            EditorPlugIn.selectedIsFree = TileMap.TILE_NOT_FREE;
    }//GEN-LAST:event_TileNotFreeActionPerformed

    private void DataHeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DataHeightActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_DataHeightActionPerformed

    private void DataSmallImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DataSmallImageActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_DataSmallImageActionPerformed

    private void DataLengthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DataLengthActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_DataLengthActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel26;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JList DataMapSize;
    private javax.swing.JTextField StartPointText;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel HelpOnMapExit;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField DataBasicSetId;
    private javax.swing.JButton DeleteExit;
    private javax.swing.JPanel LoadTileMap;
    private javax.swing.JTree BigTree;
    private javax.swing.JList jListExits;
    private javax.swing.JButton buttonSave;
    private javax.swing.JPanel SchedulePan;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JTabbedPane TileMapTabb;
    private javax.swing.JList ListOfTileMapsForExit;
    private javax.swing.JPanel SelectedBrushPan;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel Preview;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JTextField DataFullName;
    private javax.swing.JPanel TileMapsPan;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField DestinationText;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JTextField DataShortName;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JButton SaveExit;
    private javax.swing.JTextField DataLength;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JButton ExportBackground;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JTextField DataID;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JTextField DataAreaName;
    private javax.swing.JButton CompleteExit;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JList DataGroupOfGraphics;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel MapExitsPan;
    private javax.swing.JButton ResumeExit;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JTextField ExitName;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JTextField DataHeight;
    private javax.swing.JPanel SaveTileMap;
    private javax.swing.JTextField DataBasicSetIdNr;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JButton jButton3;
    private javax.swing.JList OneGroupList;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JButton SuspendExit;
    private javax.swing.JList jList1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JButton AbortExit;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JTextField DataMusicName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField EndPointText;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JList HisTileList;
    private javax.swing.JButton AddExit;
    private javax.swing.JList jList2;
    private javax.swing.JPanel GraphicsPan;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JPanel InfoOnBrushPan;
    private javax.swing.JButton ImportBackground;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton ImportAll;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JButton buttonNew;
    private javax.swing.JPanel TitlePan;
    private javax.swing.JPanel ImporExportPan;
    private javax.swing.JList ListOfMapExitsForExit;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField DataSmallImage;
    private javax.swing.JPanel jPanel36;
    public transient javax.swing.JTabbedPane MainTabb;
    private javax.swing.JButton buttonRefresh;
    private javax.swing.JButton ExportAll;
    private javax.swing.JButton jButton4;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JTextField DataInsertionPoint;
    private javax.swing.JCheckBox TileNotFree;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel jLabel15;

    // End of variables declaration//GEN-END:variables

    /*------------------------------------------------------------------------------------*/

    /** Called once to initialize the plug-in.
     *  @return if true we display the plug-in, return false if something fails during
     *          this init(), this way the plug-in won't be displayed.
     */
    @Override
    public boolean init() {
        WotlasLocation location = new WotlasLocation();
        location.WotlasLocationChangeToTileMap(0);
        EditTile.workingOnThisTileMap = EditTile.getDataManager().getWorldManager().getTileMap(location);
        RefreshData();
        addListMapsForExitPan();
        return true; // this plug-in always works...
    }

    /*------------------------------------------------------------------------------------*/

    /** Called when we need to reset the content of this plug-in.
    */
    @Override
    public void reset() {
        // We remove the previous content
        init();
    }

    /** Returns the name of the plug-in that will be displayed in the JPlayerPanel.
     * @return a short name for the plug-in
     */
    @Override
    public String getPlugInName() {
        return "Editor";
    }

    /*------------------------------------------------------------------------------------*/

    /** Returns the name of the plug-in's author.
     * @return author name.
     */
    @Override
    public String getPlugInAuthor() {
        return "Wotlas Team (Aldiss & Fred & Diego)";
    }

    /*------------------------------------------------------------------------------------*/

    /** Returns the tool tip text that will be displayed in the JPlayerPanel.
     * @return a short tool tip text
     */
    @Override
    public String getToolTipText() {
        return "To create/change TileMap";
    }

    /*------------------------------------------------------------------------------------*/

    /** Eventual index in the list of JPlayerPanels
     * @return -1 if the plug-in has to be added at the end of the plug-in list,
     *         otherwise a positive integer for a precise location.
     */
    @Override
    public int getPlugInIndex() {
        return -1;
    }

    /*------------------------------------------------------------------------------------*/

    /** Tells if this plug-in is a system plug-in that represents some base
     *  wotlas feature.
     * @return true means system plug-in, false means user plug-in
     */
    @Override
    public boolean isSystemPlugIn() {
        return false;
    }

    public JList GetNewGOGList() {
        ImageLibrary imageLib = EditTile.getDataManager().getImageLibrary();
        JLabel tmp;

        this.listModel1 = new DefaultListModel();
        tmp = new JLabel("Demo Set", GroupOfGraphics.DEMO_SET[0].getAsIcon(0, imageLib), SwingConstants.LEFT);
        this.listModel1.addElement(tmp);
        tmp = new JLabel("Rogue Like", GroupOfGraphics.ROGUE_SET[0].getAsIcon(0, imageLib), SwingConstants.LEFT);
        this.listModel1.addElement(tmp);

        JList list = new JList();
        list = new JList(this.listModel1);
        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        list.setSelectedIndex(0);
        list.setCellRenderer(new RendIcon());
        list.setVisibleRowCount(10);
        list.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                ListSelectionModel lsm = (ListSelectionModel) e.getSource();
                if (!lsm.getValueIsAdjusting()) {

                }
                // System.out.println( " diego: value: " + lsm.getLeadSelectionIndex() );
            }
        });
        return list;
    }

    class RendIcon extends JLabel implements ListCellRenderer {
        public Component getListCellRendererComponent(JList list, Object value, // value to display
        int index, // cell index
        boolean isSelected, // is the cell selected
        boolean cellHasFocus) // the list and the cell have the focus
        {
            JLabel tmp = (JLabel) value;
            setText(tmp.getText());
            setIcon(tmp.getIcon());
            setEnabled(list.isEnabled());
            setFont(list.getFont());
            setOpaque(true);
            setBackground(isSelected ? Color.cyan : Color.white);
            setForeground(isSelected ? Color.black : Color.black);
            /*
            setPreferredSize( new Dimension(50,50) );
            setMaximumSize( new Dimension(50,50) );
            setMinimumSize( new Dimension(50,50) );
            setSize(50,50);
             */
            return this;
        }
    }

    public void SetModel2(int index) {
        ImageLibrary imageLib = EditTile.getDataManager().getImageLibrary();
        JLabel tmp;
        this.listModel2.removeAllElements();
        for (int i = 0; i < GroupOfGraphics.ROGUE_SET.length; i++) {
            tmp = new JLabel("Rogue", GroupOfGraphics.ROGUE_SET[i].getAsIcon(0, imageLib), SwingConstants.LEFT);
            /*
            tmp.setPreferredSize( new Dimension(50,50) );
            tmp.setMaximumSize( new Dimension(50,50) );
            tmp.setMinimumSize( new Dimension(50,50) );
            tmp.setSize(50,50);
             */
            this.listModel2.addElement(tmp);
        }
    }

    public JList OneGroupList() {
        this.listModel2 = new DefaultListModel();
        SetModel2(0);

        JList list = new JList();
        list = new JList(this.listModel2);
        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        list.setSelectedIndex(0);
        list.setCellRenderer(new RendIcon());
        list.setVisibleRowCount(10);
        list.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                ListSelectionModel lsm = (ListSelectionModel) e.getSource();
                if (!lsm.getValueIsAdjusting()) {
                    EditorPlugIn.selectedGroup = lsm.getLeadSelectionIndex();
                    // so when changin the graphics, i will not get the 
                    // imgNr of another graphics
                    EditorPlugIn.selectedGroupImgNr = 0;
                    SetModel3(lsm.getLeadSelectionIndex());
                }
            }
        });
        return list;
    }

    public void SetModel3(int index) {
        ImageLibrary imageLib = EditTile.getDataManager().getImageLibrary();
        JLabel tmp;
        this.listModel3.removeAllElements();
        for (int i = 0; i < GroupOfGraphics.ROGUE_SET[index].totalImage(); i++) {
            tmp = new JLabel(GroupOfGraphics.ROGUE_SET[index].getAsIcon(i, imageLib), SwingConstants.LEFT);
            tmp.setPreferredSize(new Dimension(32, 32));
            this.listModel3.addElement(tmp);
        }
    }

    public JList HisTileList() {
        this.listModel3 = new DefaultListModel();
        SetModel3(0);

        JList list = new JList();
        list = new JList(this.listModel3);
        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        list.setSelectedIndex(0);
        list.setCellRenderer(new RendIcon());
        list.setVisibleRowCount(10);
        list.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                ListSelectionModel lsm = (ListSelectionModel) e.getSource();
                if (!lsm.getValueIsAdjusting()) {
                    ImageLibrary imageLib = EditTile.getDataManager().getImageLibrary();
                    EditorPlugIn.selectedGroupImgNr = lsm.getLeadSelectionIndex();
                    EditorPlugIn.this.Preview.setIcon(GroupOfGraphics.ROGUE_SET[EditorPlugIn.selectedGroup].getAsIcon(EditorPlugIn.selectedGroupImgNr, imageLib));
                }
            }
        });
        return list;
    }

    static public void AddIt(int x, int y) {
        TileMap tileMap = EditTile.workingOnThisTileMap;
        Drawable background = null; // background image
        background = new MotionlessSprite(x * tileMap.getMapTileDim().width, // ground x=0
        y * tileMap.getMapTileDim().height, // ground y=0
        EnvironmentManager.getGraphicsForMaps(tileMap.getGraphicSet())[tileMap.getManager().getMapBackGroundData()[x][y][0]], // GroupOfGraphics
        tileMap.getManager().getMapBackGroundData()[x][y][1], // number of internal tile
        ImageLibRef.SECONDARY_MAP_PRIORITY // priority
        );
        EditorPlugIn.gDirector.addDrawable(background);
    }

    static public void rememberTheGDirector(GraphicsDirector value) {
        EditorPlugIn.gDirector = value;
    }

    public void LoadTree() {
        // createNodes(treeOfTileMapNode);
        this.BigTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

        //Listen for when the selection changes.
        this.BigTree.addTreeSelectionListener(new TreeSelectionListener() {
            public void valueChanged(TreeSelectionEvent e) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) EditorPlugIn.this.BigTree.getLastSelectedPathComponent();

                if (node == null)
                    return;

                Object nodeInfo = node.getUserObject();
                if (node.isLeaf()) {

                    TreeMapInfo item = (TreeMapInfo) nodeInfo;
                    System.out.println("id " + item.map.tileMapID + " loc " + item.map.getLocation());

                    // free graphics area
                    EditorPlugIn.gDirector.removeAllDrawables();

                    // reload data
                    PreloaderEnabled.Reload(EditTile.getResourceManager(), EditTile.getDataManager().getWorldManager(), EditTile.getDataManager().getWorldManager().getTileMap(item.map.getLocation()), PreloaderEnabled.LOAD_ALL);

                    // set the used map for edito
                    EditTile.workingOnThisTileMap = EditTile.getDataManager().getWorldManager().getTileMap(item.map.getLocation());

                    // init display on this data
                    EditTile.getDataManager().myMapData.initDisplayEditor(EditTile.getDataManager(), EditTile.workingOnThisTileMap.getLocation());

                    RefreshData();

                } else {
                    // .....
                }
            }
        });
        //        treeView.setMinimumSize(minimumSize);
    }

    static public DefaultMutableTreeNode createNode(TileMap value) {
        DefaultMutableTreeNode map = null;
        map = new DefaultMutableTreeNode(new TreeMapInfo(value));
        return map;
    }

    public JList GetExitList() {
        this.listExitMod = new DefaultListModel();
        // SetListExitMod(0);

        JList list = new JList();
        list = new JList(this.listExitMod);
        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        list.setSelectedIndex(0);
        // list.setCellRenderer(new RendIcon());
        list.setVisibleRowCount(5);
        list.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                ListSelectionModel lsm = (ListSelectionModel) e.getSource();
                if (!lsm.getValueIsAdjusting()) {
                    EditorPlugIn.ExitToLoad = lsm.getLeadSelectionIndex();
                }
            }
        });
        return list;
    }

    public void SetListExitMod() {
        this.listExitMod.removeAllElements();
        MapExit[] exits = EditTile.workingOnThisTileMap.getMapExits();
        String tmp;
        if (exits == null)
            return;
        for (int i = 0; i < exits.length; i++) {
            tmp = "" + exits[i];
            this.listExitMod.addElement(tmp);
        }
    }

    public static void manageAddExit(int x, int y) {
        switch (EditorPlugIn.addExitStatus) {
            case 1:
                EditorPlugIn.itSelf.HelpOnMapExit.setText("Click the first point of the exit");
                break;
            case 2:
                EditorPlugIn.tmp1 = new Point(x, y);
                EditorPlugIn.itSelf.StartPointText.setText("" + EditorPlugIn.tmp1);
                EditorPlugIn.itSelf.HelpOnMapExit.setText("Click the second point of the exit");
                break;
            case 3:
                EditorPlugIn.tmp2 = new Point(x, y);
                EditorPlugIn.itSelf.EndPointText.setText("" + EditorPlugIn.tmp2);
                EditorPlugIn.itSelf.HelpOnMapExit.setText("<html><b>Select a destination and click Save to finish.<p> If you haven't a destination click Suspend to finish.</b></html>");
                break;
        }
        EditorPlugIn.addExitStatus++;
    }

    public JList initListMapsForExitPan() {
        this.listMapsForExitPan = new DefaultListModel();
        JList list = new JList();
        list = new JList(this.listMapsForExitPan);
        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        list.setSelectedIndex(0);
        list.setVisibleRowCount(5);
        list.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                ListSelectionModel lsm = (ListSelectionModel) e.getSource();
                if (!lsm.getValueIsAdjusting()) {
                    EditorPlugIn.indexMapsExitsForExitPan = 0;
                    EditorPlugIn.indexMapsForExitPan = lsm.getLeadSelectionIndex();
                    addListMapsExitsForExitPan();
                }
            }
        });
        return list;
    }

    public void addListMapsForExitPan() {
        this.listMapsForExitPan.removeAllElements();
        TileMap[] maps = EditTile.getDataManager().getWorldManager().getWorldMapFromID(0).getTileMaps();
        String tmp;
        for (int i = 0; i < maps.length; i++) {
            tmp = maps[i].getFullName();
            this.listMapsForExitPan.addElement(tmp);
        }
    }

    public JList initListMapsExitsForExitPan() {
        this.listMapsExitsForExitPan = new DefaultListModel();
        JList list = new JList();
        list = new JList(this.listMapsExitsForExitPan);
        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        list.setSelectedIndex(0);
        list.setVisibleRowCount(5);
        list.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                ListSelectionModel lsm = (ListSelectionModel) e.getSource();
                if (!lsm.getValueIsAdjusting()) {
                    EditorPlugIn.indexMapsExitsForExitPan = lsm.getLeadSelectionIndex();
                }
            }
        });
        return list;
    }

    public void addListMapsExitsForExitPan() {
        this.listMapsExitsForExitPan.removeAllElements();
        MapExit[] exits = EditTile.getDataManager().getWorldManager().getWorldMapFromID(0).getTileMapFromID(EditorPlugIn.indexMapsForExitPan).getMapExits();
        if (exits == null)
            return;
        for (int i = 0; i < exits.length; i++) {
            this.listMapsExitsForExitPan.addElement("" + exits[i]);
        }
    }

    public void ShowTileMapData() {
        this.DataAreaName.setText(EditTile.workingOnThisTileMap.getAreaName());
        this.DataFullName.setText(EditTile.workingOnThisTileMap.getFullName());
        this.DataShortName.setText(EditTile.workingOnThisTileMap.getShortName());
        this.DataMusicName.setText(EditTile.workingOnThisTileMap.getMusicName());
        this.DataID.setText("" + EditTile.workingOnThisTileMap.tileMapID);
        this.DataInsertionPoint.setText("xxx");
        this.DataSmallImage.setText("xxx");
        //  doing this lose the right object
        // DataGroupOfGraphics = GetNewGOGList();
        this.DataLength.setText("" + EditTile.workingOnThisTileMap.getMapSize().width);
        this.DataHeight.setText("" + EditTile.workingOnThisTileMap.getMapSize().height);
        // DataMapTileSize.setText();
        this.DataBasicSetId.setText("" + EditTile.workingOnThisTileMap.getManager().getBasicFloorId());
        this.DataBasicSetIdNr.setText("" + EditTile.workingOnThisTileMap.getManager().getBasicFloorNr());
    }

    public void RefreshData() {
        ShowTileMapData();
        SetListExitMod();
    }
}