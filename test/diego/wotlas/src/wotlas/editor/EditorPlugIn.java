/* Light And Shadow. A Persistent Universe based on Robert Jordan's Wheel of Time Books.
 * Copyright (C) 2001-2002 WOTLAS Team
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package wotlas.editor;

import wotlas.client.screen.plugin.*;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;

import wotlas.utils.*;
import wotlas.libs.aswing.*;

import wotlas.libs.persistence.*;
import wotlas.libs.graphics2D.*;
import wotlas.common.*;

import wotlas.utils.Debug;

import wotlas.common.universe.*;

import wotlas.client.*;
import wotlas.client.screen.*;

import wotlas.libs.graphics2D.drawable.*;

import javax.swing.event.*;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.event.TreeSelectionListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.tree.TreeSelectionModel;

/** Plug In to add editor tools
 *
 * @author Aldiss, Fred McMaster, Diego
 */

public class EditorPlugIn extends JPanelPlugIn {
 /*------------------------------------------------------------------------------------*/ 
    
    transient static public boolean selectedIsFree = false;
    transient static public int selectedGroup = 0;
    transient static public int selectedGroupImgNr = 0;
    transient static private GraphicsDirector gDirector;
    transient static private WotlasLocation location;
    transient static public DefaultMutableTreeNode treeOfTileMapNode;

    transient static public EditorPlugIn itSelf;
//    transient static public DefaultMutableTreeNode area = null;

  /** 'New' map button.
   */
    transient private AButton newMapButton;

  /** 'Save' map button.
   */
    transient private AButton saveMapButton;

  /** Center panel where the macros are set...
   */
    transient private JPanel centerPanel;

    transient private DefaultListModel listModel1,listModel2,listModel3,listExitMod;
    
    /** Creates new form EditorPlugIn2 */
    public EditorPlugIn() {
        super();
        itSelf = this;
        // treeOfTileMapNode = new DefaultMutableTreeNode("World : Tile Maps");
        initComponents();
        LoadTree();
        init();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabel14 = new javax.swing.JLabel();
        TitlePan = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        MainTabb = new javax.swing.JTabbedPane();
        TileMapsPan = new javax.swing.JPanel();
        TileMapTabb = new javax.swing.JTabbedPane();
        LoadTileMaps = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        BigTree = new JTree( treeOfTileMapNode );
        jPanel3 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        mapData = new javax.swing.JPanel();
        jPanel28 = new javax.swing.JPanel();
        buttonNew = new javax.swing.JButton();
        buttonSave = new javax.swing.JButton();
        buttonRefresh = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel30 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        DataAreaName = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        DataID = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        DataFullName = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        DataShortName = new javax.swing.JTextField();
        jPanel15 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        DataInsertionPoint = new javax.swing.JTextField();
        jPanel21 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        DataSmallImage = new javax.swing.JTextField();
        jPanel18 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        DataMusicName = new javax.swing.JTextField();
        jPanel20 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        DataGroupOfGraphics = GetNewGOGList();
        jPanel19 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        DataLength = new javax.swing.JTextField();
        jPanel22 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        DataHeight = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        DataMapSize = new javax.swing.JList();
        jPanel17 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        DataBasicSetId = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        DataBasicSetIdNr = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        GraphicsPan = new javax.swing.JPanel();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList1 = GetNewGOGList();
        jPanel8 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane1.setDividerLocation(100);
        jScrollPane2 = new javax.swing.JScrollPane();
        OneGroupList = OneGroupList();
        jScrollPane3 = new javax.swing.JScrollPane();
        HisTileList = HisTileList();
        SelectedBrushPan = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        Preview = new javax.swing.JLabel();
        TileNotFree = new javax.swing.JCheckBox();
        InfoOnBrushPan = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jPanel29 = new javax.swing.JPanel();
        jPanel35 = new javax.swing.JPanel();
        AddExit = new javax.swing.JButton();
        SaveExit = new javax.swing.JButton();
        CancelExit = new javax.swing.JButton();
        DeleteExit = new javax.swing.JButton();
        jPanel36 = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jListExits = GetExitList();
        jPanel6 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        StartPointText = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        EndPointText = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        DestinationText = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        ExitName = new javax.swing.JTextField();
        jPanel34 = new javax.swing.JPanel();
        ListOfTileMapsForExit = new javax.swing.JList();
        ListOfMapExitsForExit = new javax.swing.JList();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        HelpOnMapExit = new javax.swing.JLabel();
        jPanel37 = new javax.swing.JPanel();
        jPanel38 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jPanel23 = new javax.swing.JPanel();
        jSplitPane3 = new javax.swing.JSplitPane();
        jPanel32 = new javax.swing.JPanel();
        jList2 = new javax.swing.JList();

        jLabel14.setText("jLabel14");

        setLayout(new java.awt.BorderLayout());

        TitlePan.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Editor Tools");
        TitlePan.add(jLabel1);

        add(TitlePan, java.awt.BorderLayout.NORTH);

        MainTabb.setName("");
        TileMapsPan.setLayout(new java.awt.BorderLayout());

        TileMapTabb.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        LoadTileMaps.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setViewportView(BigTree);

        LoadTileMaps.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("<html><b>\nTo load Maps,  simply click on \n<p>\nthe name of the one you want \n<p>\nto load</b></html>\"");
        jLabel26.setMaximumSize(new java.awt.Dimension(364, 50));
        jLabel26.setMinimumSize(new java.awt.Dimension(364, 50));
        jLabel26.setPreferredSize(new java.awt.Dimension(364, 50));
        jPanel3.add(jLabel26);

        LoadTileMaps.add(jPanel3, java.awt.BorderLayout.SOUTH);

        TileMapTabb.addTab("Load", LoadTileMaps);

        mapData.setLayout(new java.awt.BorderLayout());

        buttonNew.setText("New");
        buttonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNewActionPerformed(evt);
            }
        });

        jPanel28.add(buttonNew);

        buttonSave.setText("Save");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        jPanel28.add(buttonSave);

        buttonRefresh.setText("Refresh");
        buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });

        jPanel28.add(buttonRefresh);

        mapData.add(jPanel28, java.awt.BorderLayout.SOUTH);

        jLabel16.setText("Area Name");
        jPanel30.add(jLabel16);

        DataAreaName.setColumns(8);
        DataAreaName.setText("jTextField1");
        jPanel30.add(DataAreaName);

        jPanel4.add(jPanel30);

        jLabel2.setForeground(new java.awt.Color(0, 153, 51));
        jLabel2.setText("Id");
        jPanel12.add(jLabel2);

        DataID.setColumns(3);
        DataID.setEditable(false);
        DataID.setText("jTextField1");
        jPanel12.add(DataID);

        jPanel4.add(jPanel12);

        jLabel3.setText("Full Name");
        jPanel13.add(jLabel3);

        DataFullName.setColumns(8);
        DataFullName.setText("jTextField2");
        jPanel13.add(DataFullName);

        jPanel4.add(jPanel13);

        jLabel4.setText("Short Name");
        jPanel14.add(jLabel4);

        DataShortName.setColumns(5);
        DataShortName.setText("jTextField3");
        jPanel14.add(DataShortName);

        jPanel4.add(jPanel14);

        jLabel5.setForeground(new java.awt.Color(0, 153, 51));
        jLabel5.setText("Insertion Point");
        jPanel15.add(jLabel5);

        DataInsertionPoint.setColumns(3);
        DataInsertionPoint.setEditable(false);
        DataInsertionPoint.setText("jTextField4");
        jPanel15.add(DataInsertionPoint);

        jPanel4.add(jPanel15);

        jLabel6.setText("Small Image");
        jPanel21.add(jLabel6);

        DataSmallImage.setColumns(8);
        DataSmallImage.setText("jTextField5");
        DataSmallImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DataSmallImageActionPerformed(evt);
            }
        });

        jPanel21.add(DataSmallImage);

        jPanel4.add(jPanel21);

        jPanel18.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Music Name");
        jPanel18.add(jLabel7);

        DataMusicName.setColumns(4);
        DataMusicName.setText("jTextField6");
        jPanel18.add(DataMusicName);

        jPanel4.add(jPanel18);

        jPanel20.setLayout(new java.awt.GridLayout(1, 2));

        jLabel8.setForeground(new java.awt.Color(0, 153, 51));
        jLabel8.setText("Group Of Graphics");
        jPanel20.add(jLabel8);

        DataGroupOfGraphics.setPreferredSize(new java.awt.Dimension(100, 50));
        jPanel20.add(DataGroupOfGraphics);

        jPanel4.add(jPanel20);

        jLabel9.setText("Length");
        jPanel19.add(jLabel9);

        DataLength.setColumns(8);
        DataLength.setText("jTextField7");
        DataLength.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DataLengthActionPerformed(evt);
            }
        });

        jPanel19.add(DataLength);

        jPanel4.add(jPanel19);

        jLabel10.setText("Height");
        jPanel22.add(jLabel10);

        DataHeight.setText("jTextField8");
        DataHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DataHeightActionPerformed(evt);
            }
        });

        jPanel22.add(DataHeight);

        jPanel4.add(jPanel22);

        jPanel16.setLayout(new java.awt.BorderLayout());

        jLabel11.setForeground(new java.awt.Color(0, 153, 51));
        jLabel11.setText("Map Tile Size");
        jPanel16.add(jLabel11, java.awt.BorderLayout.WEST);

        DataMapSize.setMaximumSize(new java.awt.Dimension(30, 20));
        DataMapSize.setMinimumSize(new java.awt.Dimension(50, 20));
        DataMapSize.setPreferredSize(new java.awt.Dimension(100, 50));
        jPanel16.add(DataMapSize, java.awt.BorderLayout.EAST);

        jPanel4.add(jPanel16);

        jLabel12.setForeground(new java.awt.Color(0, 153, 51));
        jLabel12.setText("Basic Tile Set Id");
        jPanel17.add(jLabel12);

        DataBasicSetId.setColumns(8);
        DataBasicSetId.setEditable(false);
        DataBasicSetId.setText("jTextField9");
        jPanel17.add(DataBasicSetId);

        jPanel4.add(jPanel17);

        jLabel13.setForeground(new java.awt.Color(0, 153, 51));
        jLabel13.setText("Nr. basic image");
        jPanel11.add(jLabel13);

        DataBasicSetIdNr.setColumns(8);
        DataBasicSetIdNr.setEditable(false);
        DataBasicSetIdNr.setText("jTextField10");
        jPanel11.add(DataBasicSetIdNr);

        jPanel4.add(jPanel11);

        mapData.add(jPanel4, java.awt.BorderLayout.CENTER);

        TileMapTabb.addTab("Save/New", mapData);

        TileMapsPan.add(TileMapTabb, java.awt.BorderLayout.CENTER);

        jLabel22.setForeground(new java.awt.Color(255, 51, 51));
        jLabel22.setText("Green labels, means data cant be changed.");
        jPanel2.add(jLabel22);

        TileMapsPan.add(jPanel2, java.awt.BorderLayout.NORTH);

        MainTabb.addTab("Load/Save", TileMapsPan);

        GraphicsPan.setLayout(new java.awt.BorderLayout());

        jTabbedPane4.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane4.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel5.setEnabled(false);
        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel7.setEnabled(false);
        jList1.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setEnabled(false);
        jScrollPane4.setViewportView(jList1);

        jPanel7.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel7, java.awt.BorderLayout.CENTER);

        jTabbedPane4.addTab("Select Types", jPanel5);

        jPanel8.setLayout(new java.awt.BorderLayout());

        jPanel10.setLayout(new java.awt.BorderLayout());

        OneGroupList.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        OneGroupList.setPreferredSize(new java.awt.Dimension(80, 100));
        OneGroupList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(OneGroupList);

        jSplitPane1.setLeftComponent(jScrollPane2);

        jScrollPane3.setPreferredSize(new java.awt.Dimension(80, 300));
        HisTileList.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        HisTileList.setPreferredSize(new java.awt.Dimension(80, 100));
        HisTileList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(HisTileList);

        jSplitPane1.setRightComponent(jScrollPane3);

        jPanel10.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jPanel8.add(jPanel10, java.awt.BorderLayout.CENTER);

        jTabbedPane4.addTab("Select Picture", jPanel8);

        GraphicsPan.add(jTabbedPane4, java.awt.BorderLayout.CENTER);

        SelectedBrushPan.setLayout(null);

        SelectedBrushPan.setBackground(new java.awt.Color(255, 255, 255));
        SelectedBrushPan.setMinimumSize(new java.awt.Dimension(100, 50));
        SelectedBrushPan.setName("null");
        jLabel15.setText("Selected :");
        SelectedBrushPan.add(jLabel15);
        jLabel15.setBounds(105, 22, 56, 16);

        Preview.setPreferredSize(new java.awt.Dimension(50, 50));
        SelectedBrushPan.add(Preview);
        Preview.setBounds(166, 5, 50, 50);

        TileNotFree.setBackground(new java.awt.Color(255, 255, 255));
        TileNotFree.setText("Not Free");
        TileNotFree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TileNotFreeActionPerformed(evt);
            }
        });

        SelectedBrushPan.add(TileNotFree);
        TileNotFree.setBounds(221, 18, 72, 24);

        GraphicsPan.add(SelectedBrushPan, java.awt.BorderLayout.SOUTH);

        jLabel20.setForeground(new java.awt.Color(255, 51, 51));
        jLabel20.setText("While this panel is selected you can paint selected tiles on map.");
        InfoOnBrushPan.add(jLabel20);

        GraphicsPan.add(InfoOnBrushPan, java.awt.BorderLayout.NORTH);

        MainTabb.addTab("Select Brush", GraphicsPan);

        jPanel29.setLayout(new java.awt.BorderLayout());

        AddExit.setText("Add");
        AddExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddExitActionPerformed(evt);
            }
        });

        jPanel35.add(AddExit);

        SaveExit.setText("Save");
        SaveExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveExitActionPerformed(evt);
            }
        });

        jPanel35.add(SaveExit);

        CancelExit.setText("Cancel");
        CancelExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelExitActionPerformed(evt);
            }
        });

        jPanel35.add(CancelExit);

        DeleteExit.setText("Delete");
        jPanel35.add(DeleteExit);

        jPanel29.add(jPanel35, java.awt.BorderLayout.SOUTH);

        jPanel36.setLayout(new java.awt.BorderLayout());

        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jListExits.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        jListExits.setMinimumSize(new java.awt.Dimension(100, 100));
        jListExits.setPreferredSize(new java.awt.Dimension(100, 100));
        jListExits.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jSplitPane2.setLeftComponent(jListExits);

        jPanel6.setLayout(null);

        jPanel6.setPreferredSize(new java.awt.Dimension(50, 50));
        jLabel17.setText("Start Point");
        jPanel6.add(jLabel17);
        jLabel17.setBounds(10, 10, 60, 16);

        StartPointText.setEditable(false);
        StartPointText.setText("jTextField1");
        jPanel6.add(StartPointText);
        StartPointText.setBounds(90, 10, 140, 20);

        jLabel18.setText("End Point");
        jPanel6.add(jLabel18);
        jLabel18.setBounds(10, 40, 53, 16);

        EndPointText.setEditable(false);
        EndPointText.setText("jTextField2");
        jPanel6.add(EndPointText);
        EndPointText.setBounds(90, 40, 140, 20);

        jLabel19.setText("Destination");
        jPanel6.add(jLabel19);
        jLabel19.setBounds(10, 100, 64, 16);

        DestinationText.setEditable(false);
        DestinationText.setText("jTextField3");
        jPanel6.add(DestinationText);
        DestinationText.setBounds(90, 100, 180, 20);

        jLabel23.setText("Name");
        jPanel6.add(jLabel23);
        jLabel23.setBounds(10, 70, 33, 16);

        ExitName.setText("jTextField1");
        jPanel6.add(ExitName);
        ExitName.setBounds(90, 70, 180, 20);

        jPanel34.setLayout(new java.awt.GridLayout(1, 2));

        jPanel34.add(ListOfTileMapsForExit);

        jPanel34.add(ListOfMapExitsForExit);

        jPanel6.add(jPanel34);
        jPanel34.setBounds(10, 150, 260, 90);

        jLabel24.setText("MapExits");
        jPanel6.add(jLabel24);
        jLabel24.setBounds(140, 130, 110, 16);

        jLabel25.setText("TileMaps");
        jPanel6.add(jLabel25);
        jLabel25.setBounds(10, 130, 100, 16);

        jSplitPane2.setRightComponent(jPanel6);

        jPanel36.add(jSplitPane2, java.awt.BorderLayout.CENTER);

        HelpOnMapExit.setForeground(new java.awt.Color(255, 51, 51));
        HelpOnMapExit.setText("Click the <Add> button to start adding a Map Exit.....");
        jPanel1.add(HelpOnMapExit);

        jPanel36.add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel29.add(jPanel36, java.awt.BorderLayout.CENTER);

        MainTabb.addTab("Map Exits", jPanel29);

        jPanel37.setLayout(new java.awt.BorderLayout());

        jButton3.setText("Add");
        jPanel38.add(jButton3);

        jButton4.setText("Delete");
        jPanel38.add(jButton4);

        jPanel37.add(jPanel38, java.awt.BorderLayout.SOUTH);

        jLabel21.setText(".............");
        jPanel9.add(jLabel21);

        jPanel37.add(jPanel9, java.awt.BorderLayout.NORTH);

        jPanel23.setLayout(new java.awt.BorderLayout());

        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jPanel32.setMinimumSize(new java.awt.Dimension(100, 100));
        jPanel32.setPreferredSize(new java.awt.Dimension(100, 100));
        jSplitPane3.setBottomComponent(jPanel32);

        jList2.setMaximumSize(new java.awt.Dimension(32767, 32767));
        jList2.setMinimumSize(new java.awt.Dimension(100, 100));
        jList2.setPreferredSize(new java.awt.Dimension(100, 100));
        jSplitPane3.setTopComponent(jList2);

        jPanel23.add(jSplitPane3, java.awt.BorderLayout.CENTER);

        jPanel37.add(jPanel23, java.awt.BorderLayout.CENTER);

        MainTabb.addTab("Schedule", jPanel37);

        add(MainTabb, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

    private void CancelExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelExitActionPerformed
        itSelf.HelpOnMapExit.setText("Click add to start adding a Map Exit");
        addExitStatus = 0;
    }//GEN-LAST:event_CancelExitActionPerformed

    private void SaveExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveExitActionPerformed
        if( addExitStatus != 4 )
            return;
        int x=0,y=0,xx=0,yy=0;
        x = tmp1.x;
        y = tmp1.y;
        if( x > tmp2.x ){
            x = tmp2.x;
            xx = tmp1.x+1;
        }
        else
        yy = tmp2.y+1;
        if( y > tmp2.y ){
            y = tmp2.y;
            yy = tmp1.y+1;
        }
        else
            yy = tmp2.y+1;
        MapExit mapExit1 = null;
        mapExit1 = EditTile.workingOnThisTileMap.getManager().addMapExit( new ScreenRectangle(x*32,y*32,xx*32,yy*32), ExitName.getText()  );
        mapExit1.setType( MapExit.TILEMAP_EXIT );
        mapExit1.setMapExitSide( MapExit.NONE );
//        mapExit1.setTargetWotlasLocation( new WotlasLocation(0) );
//        mapExit1.setTargetPosition( new ScreenPoint(745,280) );

        itSelf.HelpOnMapExit.setText("Click add to start adding a Map Exit");
        addExitStatus = 0;
        SetListExitMod();
        gDirector.removeAllDrawables();
        EditTile.getDataManager().myMapData.initDisplayEditor( EditTile.getDataManager(), location );
    }//GEN-LAST:event_SaveExitActionPerformed

    private void AddExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddExitActionPerformed
        addExitStatus = 1;
        manageAddExit( 0, 0 );
    }//GEN-LAST:event_AddExitActionPerformed

    private void buttonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNewActionPerformed
        gDirector.removeAllDrawables();
        TileMap origin = EditTile.getDataManager().getWorldManager().getTileMap( location );
        TileMap destination = EditTile.getDataManager().getWorldManager().getWorldMapFromID(0).addNewTileMap();
        destination.initNewTileMap( EditTile.getDataManager().getWorldManager().getWorldMapFromID(0) );
        location = destination.getLocation();
        System.out.println( " new location "+location.toString() );
        destination.setAreaName("");
        destination.setFullName("new full name");
        destination.setShortName("shortname");
        destination.setInsertionPoint( origin.getInsertionPoint() );
        destination.setSmallTileMapImage( origin.getSmallTileMapImage() );
        destination.setMusicName( origin.getMusicName() );
        destination.selectGroupOfGraphics( GroupOfGraphics.ROGUE_SET );
        TileManagerFlat manager = new TileManagerFlat(  destination );
        manager.setMap( 10, 20, TileMap.PIXEL_32
        , origin.getManager().getBasicFloorId()
        , origin.getManager().getBasicFloorNr() );
        destination.setManager( (TileMapManager)manager );
        EditTile.workingOnThisTileMap = destination;
        EditTile.getDataManager().myMapData.initDisplayEditor( EditTile.getDataManager(), location );
    }//GEN-LAST:event_buttonNewActionPerformed

    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed
        gDirector.removeAllDrawables();
        EditTile.getDataManager().myMapData.initDisplayEditor( EditTile.getDataManager(), location );
    }//GEN-LAST:event_buttonRefreshActionPerformed

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        try{
            System.out.println( " saving location "+location.toString() );
            TileMap tileMap = EditTile.getDataManager().getWorldManager().getTileMap( location );
            EditTile.workingOnThisTileMap.setAreaName( DataAreaName.getText() );
            EditTile.workingOnThisTileMap.setFullName( DataFullName.getText() );
            EditTile.workingOnThisTileMap.setShortName( DataShortName.getText() );
            // DataInsertionPoint.setText("xxx");
            // DataSmallImage.setText("xxx");
            DataMusicName.setText(EditTile.workingOnThisTileMap.getMusicName());
            // DataBasicSetId.setText( "" + EditTile.workingOnThisTileMap.getManager().getBasicFloorId() );
            // DataBasicSetIdNr.setText( "" + EditTile.workingOnThisTileMap.getManager().getBasicFloorNr() );
        } catch (Exception e) {
            System.out.println("not saved as");
            return;
        }
        EditTile.letsTryToSave( location.getTileMapID() );
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void TileNotFreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TileNotFreeActionPerformed
        if( !TileNotFree.isSelected() )
            selectedIsFree = TileMap.TILE_FREE;
        else
            selectedIsFree = TileMap.TILE_NOT_FREE;
    }//GEN-LAST:event_TileNotFreeActionPerformed

    private void DataHeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DataHeightActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_DataHeightActionPerformed

    private void DataSmallImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DataSmallImageActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_DataSmallImageActionPerformed

    private void DataLengthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DataLengthActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_DataLengthActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel LoadTileMaps;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JList DataMapSize;
    private javax.swing.JTextField StartPointText;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel HelpOnMapExit;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField DataBasicSetId;
    private javax.swing.JButton DeleteExit;
    private javax.swing.JTree BigTree;
    private javax.swing.JList jListExits;
    private javax.swing.JButton buttonSave;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JTabbedPane TileMapTabb;
    private javax.swing.JList ListOfTileMapsForExit;
    private javax.swing.JPanel SelectedBrushPan;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel Preview;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JTextField DataFullName;
    private javax.swing.JPanel TileMapsPan;
    private javax.swing.JButton CancelExit;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField DestinationText;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JTextField DataShortName;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JButton SaveExit;
    private javax.swing.JTextField DataLength;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JTextField DataID;
    private javax.swing.JTextField DataAreaName;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JList DataGroupOfGraphics;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JTextField ExitName;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JTextField DataHeight;
    private javax.swing.JTextField DataBasicSetIdNr;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JButton jButton3;
    private javax.swing.JList OneGroupList;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel mapData;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JList jList1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JTextField DataMusicName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField EndPointText;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JList HisTileList;
    private javax.swing.JButton AddExit;
    private javax.swing.JList jList2;
    private javax.swing.JPanel GraphicsPan;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JPanel InfoOnBrushPan;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JButton buttonNew;
    private javax.swing.JPanel TitlePan;
    private javax.swing.JList ListOfMapExitsForExit;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField DataSmallImage;
    private javax.swing.JPanel jPanel36;
    public transient javax.swing.JTabbedPane MainTabb;
    private javax.swing.JButton buttonRefresh;
    private javax.swing.JButton jButton4;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JTextField DataInsertionPoint;
    private javax.swing.JCheckBox TileNotFree;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel jLabel15;
    // End of variables declaration//GEN-END:variables
    
 /*------------------------------------------------------------------------------------*/

  /** Called once to initialize the plug-in.
   *  @return if true we display the plug-in, return false if something fails during
   *          this init(), this way the plug-in won't be displayed.
   */
    public boolean init() {
        location = new WotlasLocation();
        location.WotlasLocationChangeToTileMap(0);
        EditTile.workingOnThisTileMap = EditTile.getDataManager().getWorldManager().getTileMap( location );
        DataID.setText("xxx");
        DataAreaName.setText(EditTile.workingOnThisTileMap.getAreaName());
        DataFullName.setText(EditTile.workingOnThisTileMap.getFullName());
        DataShortName.setText(EditTile.workingOnThisTileMap.getShortName());
        DataInsertionPoint.setText("xxx");
        DataSmallImage.setText("xxx");
        DataMusicName.setText(EditTile.workingOnThisTileMap.getMusicName());
        //  doing this lose the right object
        // DataGroupOfGraphics = GetNewGOGList();
        DataLength.setText( "" + EditTile.workingOnThisTileMap.getMapSize().width );
        DataHeight.setText( "" + EditTile.workingOnThisTileMap.getMapSize().height );
        // DataMapTileSize.setText();
        DataBasicSetId.setText( "" + EditTile.workingOnThisTileMap.getManager().getBasicFloorId() );
        DataBasicSetIdNr.setText( "" + EditTile.workingOnThisTileMap.getManager().getBasicFloorNr() );
        SetListExitMod();
        return true; // this plug-in always works...
    }

 /*------------------------------------------------------------------------------------*/

    /** Called when we need to reset the content of this plug-in.
    */
    public void reset() {
        // We remove the previous content
    	init();
    }

   /** Returns the name of the plug-in that will be displayed in the JPlayerPanel.
    * @return a short name for the plug-in
    */
      public String getPlugInName() {
      	  return "Editor";
      }

 /*------------------------------------------------------------------------------------*/

   /** Returns the name of the plug-in's author.
    * @return author name.
    */
      public String getPlugInAuthor() {
          return "Wotlas Team (Aldiss & Fred & Diego)";
      }

 /*------------------------------------------------------------------------------------*/

   /** Returns the tool tip text that will be displayed in the JPlayerPanel.
    * @return a short tool tip text
    */
      public String getToolTipText() {
          return "To create/change TileMap";
      }

 /*------------------------------------------------------------------------------------*/

   /** Eventual index in the list of JPlayerPanels
    * @return -1 if the plug-in has to be added at the end of the plug-in list,
    *         otherwise a positive integer for a precise location.
    */
      public int getPlugInIndex() {
          return -1;
      }

 /*------------------------------------------------------------------------------------*/

   /** Tells if this plug-in is a system plug-in that represents some base
    *  wotlas feature.
    * @return true means system plug-in, false means user plug-in
    */
    public boolean isSystemPlugIn() {
        return false;
    }
    
    public JList GetNewGOGList() {
        ImageLibrary imageLib = EditTile.getDataManager().getImageLibrary();
        JLabel tmp;

        listModel1 = new DefaultListModel();
        tmp = new JLabel("Demo Set", GroupOfGraphics.DEMO_SET[0].getAsIcon(0, imageLib), JLabel.LEFT);
        listModel1.addElement( tmp );
        tmp = new JLabel("Rogue Like", GroupOfGraphics.ROGUE_SET[0].getAsIcon(0, imageLib), JLabel.LEFT );
        listModel1.addElement( tmp );

      	JList list = new JList();
        list = new JList(listModel1);
        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        list.setSelectedIndex(0);
        list.setCellRenderer(new RendIcon());
        list.setVisibleRowCount(5);
        list.getSelectionModel().addListSelectionListener( new ListSelectionListener() {
            public void valueChanged( ListSelectionEvent e ) {
                ListSelectionModel lsm = (ListSelectionModel)e.getSource();
                if( !lsm.getValueIsAdjusting() ) {
                    
                }
                // System.out.println( " diego: value: " + lsm.getLeadSelectionIndex() );
            }
        });
        return list;
    }

    class RendIcon extends JLabel implements ListCellRenderer {
        public Component getListCellRendererComponent(
        JList list,
        Object value,            // value to display
        int index,               // cell index
        boolean isSelected,      // is the cell selected
        boolean cellHasFocus)    // the list and the cell have the focus
        {
            JLabel tmp = (JLabel) value;
            setText( tmp.getText() );
            setIcon( tmp.getIcon() );
            setEnabled(list.isEnabled());
            setFont(list.getFont());
            setOpaque(true);
            setBackground(isSelected ? Color.cyan : Color.white);
            setForeground(isSelected ? Color.black : Color.black);
            return this;
        }
    }

    public void SetModel2(int index) {
        ImageLibrary imageLib = EditTile.getDataManager().getImageLibrary();
        JLabel tmp;
        listModel2.removeAllElements();
        for( int i=0; i < GroupOfGraphics.ROGUE_SET.length; i++) {
            tmp = new JLabel("Rogue", GroupOfGraphics.ROGUE_SET[i].getAsIcon(0, imageLib), JLabel.LEFT );
            listModel2.addElement( tmp );
        }
    }

    public JList OneGroupList() {
        listModel2 = new DefaultListModel();
        SetModel2(0);
                
      	JList list = new JList();
        list = new JList(listModel2);
        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        list.setSelectedIndex(0);
        list.setCellRenderer(new RendIcon());
        list.setVisibleRowCount(5);    
        list.getSelectionModel().addListSelectionListener( new ListSelectionListener() {
            public void valueChanged( ListSelectionEvent e ) {
                ListSelectionModel lsm = (ListSelectionModel)e.getSource();
                if( !lsm.getValueIsAdjusting() ) {
                    selectedGroup = lsm.getLeadSelectionIndex();
                    // so when changin the graphics, i will not get the 
                    // imgNr of another graphics
                    selectedGroupImgNr = 0;
                    SetModel3( lsm.getLeadSelectionIndex() );
                }
            }
        });
        return list;
    }

    public void SetModel3(int index) {
        ImageLibrary imageLib = EditTile.getDataManager().getImageLibrary();
        JLabel tmp;
        listModel3.removeAllElements();
        for( int i=0; i < GroupOfGraphics.ROGUE_SET[index].totalImage(); i++) {
            tmp = new JLabel( GroupOfGraphics.ROGUE_SET[index].getAsIcon(i, imageLib), JLabel.LEFT );
            listModel3.addElement( tmp );
        }
    }

    public JList HisTileList() {
        listModel3 = new DefaultListModel();
        SetModel3(0);
        
      	JList list = new JList();
        list = new JList(listModel3);
        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        list.setSelectedIndex(0);
        list.setCellRenderer(new RendIcon());
        list.setVisibleRowCount(5);
        list.getSelectionModel().addListSelectionListener( new ListSelectionListener() {
            public void valueChanged( ListSelectionEvent e ) {
                ListSelectionModel lsm = (ListSelectionModel)e.getSource();
                if( !lsm.getValueIsAdjusting() ) {
                    ImageLibrary imageLib = EditTile.getDataManager().getImageLibrary();
                    selectedGroupImgNr = lsm.getLeadSelectionIndex();
                    Preview.setIcon( GroupOfGraphics.ROGUE_SET[selectedGroup].getAsIcon(selectedGroupImgNr, imageLib) );
                }
            }
        });
        return list;
    }
    
    static public void AddIt(int x, int y){
        TileMap tileMap = EditTile.workingOnThisTileMap;
        Drawable background = null;             // background image
        background = (Drawable) new MotionlessSprite( x*tileMap.getMapTileDim().width, // ground x=0
            y*tileMap.getMapTileDim().height,       // ground y=0
            tileMap.getGroupOfGraphics()[tileMap.getManager().getMapBackGroundData()[x][y][0]],  // GroupOfGraphics
            tileMap.getManager().getMapBackGroundData()[x][y][1],        // number of internal tile
            ImageLibRef.SECONDARY_MAP_PRIORITY      // priority
        );
        gDirector.addDrawable( background );
    }

    static public void rememberTheGDirector(GraphicsDirector value){
        gDirector = value;
    }

    public void LoadTree() {
        // createNodes(treeOfTileMapNode);
        BigTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

        //Listen for when the selection changes.
        BigTree.addTreeSelectionListener(new TreeSelectionListener() {
            public void valueChanged(TreeSelectionEvent e) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode)
                                   BigTree.getLastSelectedPathComponent();

                if (node == null) return;

                Object nodeInfo = node.getUserObject();
                if (node.isLeaf()) {
                    TreeMapInfo item = (TreeMapInfo)nodeInfo;
                    
                    location = new WotlasLocation();
                    location.WotlasLocationChangeToTileMap( item.Id );
                    gDirector.removeAllDrawables();
                    EditTile.getDataManager().myMapData.initDisplayEditor( EditTile.getDataManager(), location );
                } else {
                    // .....
                }
            }
        });        
//        treeView.setMinimumSize(minimumSize);
    }

    static public DefaultMutableTreeNode createNode( TileMap value ) {
        DefaultMutableTreeNode map = null;
        map = new DefaultMutableTreeNode( new TreeMapInfo( value.getFullName(), value.tileMapID ) );
        return map;
    }

    public JList GetExitList() {
        listExitMod = new DefaultListModel();
        // SetListExitMod(0);
        
      	JList list = new JList();
        list = new JList(listExitMod);
        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        list.setSelectedIndex(0);
        // list.setCellRenderer(new RendIcon());
        list.setVisibleRowCount(5);
        list.getSelectionModel().addListSelectionListener( new ListSelectionListener() {
            public void valueChanged( ListSelectionEvent e ) {
                ListSelectionModel lsm = (ListSelectionModel)e.getSource();
                if( !lsm.getValueIsAdjusting() ) {
                    // xxx = lsm.getLeadSelectionIndex();
                }
            }
        });
        return list;
    }

    public void SetListExitMod() {
        listExitMod.removeAllElements();
        MapExit[] exits = EditTile.workingOnThisTileMap.getMapExits();
        String tmp;
        for(int i=0; i<exits.length; i++) {
            tmp = ""+exits[i];
            listExitMod.addElement( tmp );
        }
    }
    
    static int addExitStatus = 0;
    static Point tmp1,tmp2;

    public static void manageAddExit( int x, int y ) {
        switch(addExitStatus){
            case 1:
                itSelf.HelpOnMapExit.setText("Click the first point of the exit");
                break;
            case 2:
                tmp1 = new Point(x,y);
                itSelf.StartPointText.setText( ""+tmp1 );
                itSelf.HelpOnMapExit.setText("Click the second point of the exit");
                break;
            case 3:
                tmp2 = new Point(x,y);
                itSelf.EndPointText.setText( ""+tmp2 );
                itSelf.HelpOnMapExit.setText("Write the name, then select a destination and/or \n click Save to finish.\n Cancel restart the process.");
                break;
        }
        addExitStatus++;
    }

    /*
    public JList GetTileMapListForExit() {
        getTileMapListForExit = new DefaultListModel();
        // SetListExitMod(0);
        
      	JList list = new JList();
        list = new JList(getTileMapListForExit);
        list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        list.setSelectedIndex(0);
        // list.setCellRenderer(new RendIcon());
        list.setVisibleRowCount(5);
        list.getSelectionModel().addListSelectionListener( new ListSelectionListener() {
            public void valueChanged( ListSelectionEvent e ) {
                ListSelectionModel lsm = (ListSelectionModel)e.getSource();
                if( !lsm.getValueIsAdjusting() ) {
                    // xxx = lsm.getLeadSelectionIndex();
                }
            }
        });
        return list;
    }

    public void SetListExitMod() {
        getTileMapListForExit.removeAllElements();
        MapExit[] exits = EditTile.workingOnThisTileMap.getMapExits();
        String tmp;
        for(int i=0; i<getTileMapListForExit.length; i++) {
            tmp = .FullName();
            getTileMapListForExit.addElement( tmp );
        }
    }
    */
}